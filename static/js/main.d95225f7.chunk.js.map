{"version":3,"sources":["generated/graphql.ts","components/GraphDebugger/GraphDebugger.tsx","components/GraphQuery/appGraphConfig.ts","components/GraphQuery/convertPersonsToGraphData.ts","components/GraphQuery/GraphTools.tsx","components/GraphQuery/GraphQuery.tsx","armillarysphere.svg","components/ArmillarySphereIcon/ArmillarySphereIcon.tsx","components/AppToolbar/AppToolbar.tsx","components/StartDialog/StartDialog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DgraphIndex","HttpMethod","Mode","PersonHasFilter","PersonOrderable","StoryHasFilter","StoryOrderable","graphQLFetcher","graphQLParams","a","fetch","method","headers","body","JSON","stringify","json","GraphDebugger","fetcher","PersonFieldsFragmentDoc","PersonWithLinksFieldsFragmentDoc","GetAllPersonsDocument","GetPersonByNameDocument","GetPersonByUidDocument","GetStartNodesDocument","defaultWrapper","sdkFunction","appGraphConfig","width","height","automaticRearrangeAfterDropNode","collapsible","directed","focusAnimationDuration","focusZoom","highlightDegree","highlightOpacity","linkHighlightBehavior","maxZoom","minZoom","nodeHighlightBehavior","panAndZoom","staticGraph","staticGraphWithDragAndDrop","d3","alphaTarget","gravity","linkLength","linkStrength","disableLinkForce","node","color","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","mouseCursor","opacity","renderLabel","size","strokeColor","strokeWidth","svg","symbolType","labelProperty","n","name","link","semanticStrokeWidth","markerHeight","markerWidth","genderColor","gender","convertPersonToNode","originNode","personID","id","x","y","Math","random","isJustVal","val","Boolean","relationTypeColor","type","convertPersonsToGraphData","persons","justPersons","filter","nodes","map","relatedNodes","convertRelatedToNodes","allNodes","concat","linksToExistingNodes","flatMap","allRelations","children","parents","nonBioChildren","nonBioParents","physicalRelation","otherRelation","Object","entries","relationType","relatedPersons","person","otherPersonID","isInverted","source","target","convertRelatedPersonToEdge","some","GraphTools","style","position","client","GraphQLClient","process","GraphQuery","useState","links","graphData","setGraphData","withWrapper","getAllPersons","variables","request","print","getPersonByName","getPersonByUid","getStartNodes","getSdk","graphRef","useRef","initialize","queryPerson","getElem","document","getElementById","setAttribute","console","log","error","useEffect","length","ref","data","config","window","innerWidth","innerHeight","onClickNode","uid","getPerson","onClickGraph","_extends","assign","i","arguments","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","transform","xmlns","xmlnsXlink","d","SvgArmillarysphere","_ref","svgRef","title","titleId","props","fill","viewBox","xmlSpace","ForwardRef","ArmillarySphereIcon","className","SvgIcon","component","ReactComponent","useStyles","makeStyles","theme","root","flexGrow","appIcon","marginRight","spacing","AppToolbar","classes","variant","Button","RouterLink","to","href","StartDialog","dialogHasBeenSeen","localStorage","getItem","open","setOpen","Dialog","disableBackdropClick","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","onClick","setItem","autoFocus","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d95225f7.chunk.js","sourcesContent":["import { GraphQLClient } from 'graphql-request';\nimport { print } from 'graphql';\nimport { gql } from 'graphql.macro';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * The DateTime scalar type represents date and time as a string in RFC3339 format.\n   * For example: \"1985-04-12T23:20:50.52Z\" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.\n   */\n  DateTime: any;\n  /**\n   * The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.\n   * Int64 can represent values in range [-(2^63),(2^63 - 1)].\n   */\n  Int64: any;\n};\n\nexport type AddPersonInput = {\n  children?: Maybe<Array<Maybe<PersonRef>>>;\n  dateOfBirth?: Maybe<Scalars['Int']>;\n  dateOfDeath?: Maybe<Scalars['Int']>;\n  gender?: Maybe<Scalars['String']>;\n  location?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  name?: Maybe<Scalars['String']>;\n  nickNames?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nonBioChildren?: Maybe<Array<Maybe<PersonRef>>>;\n  nonBioParents?: Maybe<Array<Maybe<PersonRef>>>;\n  otherRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  parents?: Maybe<Array<Maybe<PersonRef>>>;\n  personID: Scalars['String'];\n  physicalRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  story?: Maybe<StoryRef>;\n};\n\nexport type AddPersonPayload = {\n  __typename?: 'AddPersonPayload';\n  numUids?: Maybe<Scalars['Int']>;\n  person?: Maybe<Array<Maybe<Person>>>;\n};\n\n\nexport type AddPersonPayloadPersonArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\nexport type AddStoryInput = {\n  persons?: Maybe<Array<Maybe<PersonRef>>>;\n  storyID: Scalars['String'];\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type AddStoryPayload = {\n  __typename?: 'AddStoryPayload';\n  numUids?: Maybe<Scalars['Int']>;\n  story?: Maybe<Array<Maybe<Story>>>;\n};\n\n\nexport type AddStoryPayloadStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<StoryOrder>;\n};\n\nexport type AuthRule = {\n  and?: Maybe<Array<Maybe<AuthRule>>>;\n  not?: Maybe<AuthRule>;\n  or?: Maybe<Array<Maybe<AuthRule>>>;\n  rule?: Maybe<Scalars['String']>;\n};\n\nexport type ContainsFilter = {\n  point?: Maybe<PointRef>;\n  polygon?: Maybe<PolygonRef>;\n};\n\nexport type CustomHttp = {\n  body?: Maybe<Scalars['String']>;\n  forwardHeaders?: Maybe<Array<Scalars['String']>>;\n  graphql?: Maybe<Scalars['String']>;\n  introspectionHeaders?: Maybe<Array<Scalars['String']>>;\n  method: HttpMethod;\n  mode?: Maybe<Mode>;\n  secretHeaders?: Maybe<Array<Scalars['String']>>;\n  skipIntrospection?: Maybe<Scalars['Boolean']>;\n  url: Scalars['String'];\n};\n\n\nexport type DateTimeFilter = {\n  between?: Maybe<DateTimeRange>;\n  eq?: Maybe<Scalars['DateTime']>;\n  ge?: Maybe<Scalars['DateTime']>;\n  gt?: Maybe<Scalars['DateTime']>;\n  le?: Maybe<Scalars['DateTime']>;\n  lt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type DateTimeRange = {\n  max: Scalars['DateTime'];\n  min: Scalars['DateTime'];\n};\n\nexport type DeletePersonPayload = {\n  __typename?: 'DeletePersonPayload';\n  msg?: Maybe<Scalars['String']>;\n  numUids?: Maybe<Scalars['Int']>;\n  person?: Maybe<Array<Maybe<Person>>>;\n};\n\n\nexport type DeletePersonPayloadPersonArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\nexport type DeleteStoryPayload = {\n  __typename?: 'DeleteStoryPayload';\n  msg?: Maybe<Scalars['String']>;\n  numUids?: Maybe<Scalars['Int']>;\n  story?: Maybe<Array<Maybe<Story>>>;\n};\n\n\nexport type DeleteStoryPayloadStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<StoryOrder>;\n};\n\nexport enum DgraphIndex {\n  Bool = 'bool',\n  Day = 'day',\n  Exact = 'exact',\n  Float = 'float',\n  Fulltext = 'fulltext',\n  Geo = 'geo',\n  Hash = 'hash',\n  Hour = 'hour',\n  Int = 'int',\n  Int64 = 'int64',\n  Month = 'month',\n  Regexp = 'regexp',\n  Term = 'term',\n  Trigram = 'trigram',\n  Year = 'year'\n}\n\nexport type FloatFilter = {\n  between?: Maybe<FloatRange>;\n  eq?: Maybe<Scalars['Float']>;\n  ge?: Maybe<Scalars['Float']>;\n  gt?: Maybe<Scalars['Float']>;\n  le?: Maybe<Scalars['Float']>;\n  lt?: Maybe<Scalars['Float']>;\n};\n\nexport type FloatRange = {\n  max: Scalars['Float'];\n  min: Scalars['Float'];\n};\n\nexport type GenerateMutationParams = {\n  add?: Maybe<Scalars['Boolean']>;\n  delete?: Maybe<Scalars['Boolean']>;\n  update?: Maybe<Scalars['Boolean']>;\n};\n\nexport type GenerateQueryParams = {\n  aggregate?: Maybe<Scalars['Boolean']>;\n  get?: Maybe<Scalars['Boolean']>;\n  password?: Maybe<Scalars['Boolean']>;\n  query?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum HttpMethod {\n  Delete = 'DELETE',\n  Get = 'GET',\n  Patch = 'PATCH',\n  Post = 'POST',\n  Put = 'PUT'\n}\n\n\nexport type Int64Filter = {\n  between?: Maybe<Int64Range>;\n  eq?: Maybe<Scalars['Int64']>;\n  ge?: Maybe<Scalars['Int64']>;\n  gt?: Maybe<Scalars['Int64']>;\n  le?: Maybe<Scalars['Int64']>;\n  lt?: Maybe<Scalars['Int64']>;\n};\n\nexport type Int64Range = {\n  max: Scalars['Int64'];\n  min: Scalars['Int64'];\n};\n\nexport type IntFilter = {\n  between?: Maybe<IntRange>;\n  eq?: Maybe<Scalars['Int']>;\n  ge?: Maybe<Scalars['Int']>;\n  gt?: Maybe<Scalars['Int']>;\n  le?: Maybe<Scalars['Int']>;\n  lt?: Maybe<Scalars['Int']>;\n};\n\nexport type IntRange = {\n  max: Scalars['Int'];\n  min: Scalars['Int'];\n};\n\nexport type IntersectsFilter = {\n  multiPolygon?: Maybe<MultiPolygonRef>;\n  polygon?: Maybe<PolygonRef>;\n};\n\nexport enum Mode {\n  Batch = 'BATCH',\n  Single = 'SINGLE'\n}\n\nexport type MultiPolygon = {\n  __typename?: 'MultiPolygon';\n  polygons: Array<Polygon>;\n};\n\nexport type MultiPolygonRef = {\n  polygons: Array<PolygonRef>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addPerson?: Maybe<AddPersonPayload>;\n  addStory?: Maybe<AddStoryPayload>;\n  deletePerson?: Maybe<DeletePersonPayload>;\n  deleteStory?: Maybe<DeleteStoryPayload>;\n  updatePerson?: Maybe<UpdatePersonPayload>;\n  updateStory?: Maybe<UpdateStoryPayload>;\n};\n\n\nexport type MutationAddPersonArgs = {\n  input: Array<AddPersonInput>;\n};\n\n\nexport type MutationAddStoryArgs = {\n  input: Array<AddStoryInput>;\n};\n\n\nexport type MutationDeletePersonArgs = {\n  filter: PersonFilter;\n};\n\n\nexport type MutationDeleteStoryArgs = {\n  filter: StoryFilter;\n};\n\n\nexport type MutationUpdatePersonArgs = {\n  input: UpdatePersonInput;\n};\n\n\nexport type MutationUpdateStoryArgs = {\n  input: UpdateStoryInput;\n};\n\nexport type NearFilter = {\n  coordinate: PointRef;\n  distance: Scalars['Float'];\n};\n\nexport type Person = {\n  __typename?: 'Person';\n  children?: Maybe<Array<Maybe<Person>>>;\n  childrenAggregate?: Maybe<PersonAggregateResult>;\n  dateOfBirth?: Maybe<Scalars['Int']>;\n  dateOfDeath?: Maybe<Scalars['Int']>;\n  gender?: Maybe<Scalars['String']>;\n  location?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  name?: Maybe<Scalars['String']>;\n  nickNames?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nonBioChildren?: Maybe<Array<Maybe<Person>>>;\n  nonBioChildrenAggregate?: Maybe<PersonAggregateResult>;\n  nonBioParents?: Maybe<Array<Maybe<Person>>>;\n  nonBioParentsAggregate?: Maybe<PersonAggregateResult>;\n  otherRelation?: Maybe<Array<Maybe<Person>>>;\n  otherRelationAggregate?: Maybe<PersonAggregateResult>;\n  parents?: Maybe<Array<Maybe<Person>>>;\n  parentsAggregate?: Maybe<PersonAggregateResult>;\n  personID: Scalars['String'];\n  physicalRelation?: Maybe<Array<Maybe<Person>>>;\n  physicalRelationAggregate?: Maybe<PersonAggregateResult>;\n  story?: Maybe<Story>;\n};\n\n\nexport type PersonChildrenArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonChildrenAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonNonBioChildrenArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonNonBioChildrenAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonNonBioParentsArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonNonBioParentsAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonOtherRelationArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonOtherRelationAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonParentsArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonParentsAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonPhysicalRelationArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonPhysicalRelationAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n};\n\nexport type PersonAggregateResult = {\n  __typename?: 'PersonAggregateResult';\n  count?: Maybe<Scalars['Int']>;\n  dateOfBirthAvg?: Maybe<Scalars['Float']>;\n  dateOfBirthMax?: Maybe<Scalars['Int']>;\n  dateOfBirthMin?: Maybe<Scalars['Int']>;\n  dateOfBirthSum?: Maybe<Scalars['Int']>;\n  dateOfDeathAvg?: Maybe<Scalars['Float']>;\n  dateOfDeathMax?: Maybe<Scalars['Int']>;\n  dateOfDeathMin?: Maybe<Scalars['Int']>;\n  dateOfDeathSum?: Maybe<Scalars['Int']>;\n  genderMax?: Maybe<Scalars['String']>;\n  genderMin?: Maybe<Scalars['String']>;\n  nameMax?: Maybe<Scalars['String']>;\n  nameMin?: Maybe<Scalars['String']>;\n  personIDMax?: Maybe<Scalars['String']>;\n  personIDMin?: Maybe<Scalars['String']>;\n};\n\nexport type PersonFilter = {\n  and?: Maybe<Array<Maybe<PersonFilter>>>;\n  has?: Maybe<PersonHasFilter>;\n  name?: Maybe<StringTermFilter>;\n  not?: Maybe<PersonFilter>;\n  or?: Maybe<Array<Maybe<PersonFilter>>>;\n  personID?: Maybe<StringHashFilter>;\n};\n\nexport enum PersonHasFilter {\n  Children = 'children',\n  DateOfBirth = 'dateOfBirth',\n  DateOfDeath = 'dateOfDeath',\n  Gender = 'gender',\n  Location = 'location',\n  Name = 'name',\n  NickNames = 'nickNames',\n  NonBioChildren = 'nonBioChildren',\n  NonBioParents = 'nonBioParents',\n  OtherRelation = 'otherRelation',\n  Parents = 'parents',\n  PersonId = 'personID',\n  PhysicalRelation = 'physicalRelation',\n  Story = 'story'\n}\n\nexport type PersonOrder = {\n  asc?: Maybe<PersonOrderable>;\n  desc?: Maybe<PersonOrderable>;\n  then?: Maybe<PersonOrder>;\n};\n\nexport enum PersonOrderable {\n  DateOfBirth = 'dateOfBirth',\n  DateOfDeath = 'dateOfDeath',\n  Gender = 'gender',\n  Name = 'name',\n  PersonId = 'personID'\n}\n\nexport type PersonPatch = {\n  children?: Maybe<Array<Maybe<PersonRef>>>;\n  dateOfBirth?: Maybe<Scalars['Int']>;\n  dateOfDeath?: Maybe<Scalars['Int']>;\n  gender?: Maybe<Scalars['String']>;\n  location?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  name?: Maybe<Scalars['String']>;\n  nickNames?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nonBioChildren?: Maybe<Array<Maybe<PersonRef>>>;\n  nonBioParents?: Maybe<Array<Maybe<PersonRef>>>;\n  otherRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  parents?: Maybe<Array<Maybe<PersonRef>>>;\n  physicalRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  story?: Maybe<StoryRef>;\n};\n\nexport type PersonRef = {\n  children?: Maybe<Array<Maybe<PersonRef>>>;\n  dateOfBirth?: Maybe<Scalars['Int']>;\n  dateOfDeath?: Maybe<Scalars['Int']>;\n  gender?: Maybe<Scalars['String']>;\n  location?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  name?: Maybe<Scalars['String']>;\n  nickNames?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nonBioChildren?: Maybe<Array<Maybe<PersonRef>>>;\n  nonBioParents?: Maybe<Array<Maybe<PersonRef>>>;\n  otherRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  parents?: Maybe<Array<Maybe<PersonRef>>>;\n  personID?: Maybe<Scalars['String']>;\n  physicalRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  story?: Maybe<StoryRef>;\n};\n\nexport type Point = {\n  __typename?: 'Point';\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\nexport type PointGeoFilter = {\n  near?: Maybe<NearFilter>;\n  within?: Maybe<WithinFilter>;\n};\n\nexport type PointList = {\n  __typename?: 'PointList';\n  points: Array<Point>;\n};\n\nexport type PointListRef = {\n  points: Array<PointRef>;\n};\n\nexport type PointRef = {\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\nexport type Polygon = {\n  __typename?: 'Polygon';\n  coordinates: Array<PointList>;\n};\n\nexport type PolygonGeoFilter = {\n  contains?: Maybe<ContainsFilter>;\n  intersects?: Maybe<IntersectsFilter>;\n  near?: Maybe<NearFilter>;\n  within?: Maybe<WithinFilter>;\n};\n\nexport type PolygonRef = {\n  coordinates: Array<PointListRef>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  aggregatePerson?: Maybe<PersonAggregateResult>;\n  aggregateStory?: Maybe<StoryAggregateResult>;\n  getPerson?: Maybe<Person>;\n  getStory?: Maybe<Story>;\n  queryPerson?: Maybe<Array<Maybe<Person>>>;\n  queryStory?: Maybe<Array<Maybe<Story>>>;\n};\n\n\nexport type QueryAggregatePersonArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type QueryAggregateStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n};\n\n\nexport type QueryGetPersonArgs = {\n  personID: Scalars['String'];\n};\n\n\nexport type QueryGetStoryArgs = {\n  storyID: Scalars['String'];\n};\n\n\nexport type QueryQueryPersonArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type QueryQueryStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<StoryOrder>;\n};\n\nexport type Story = {\n  __typename?: 'Story';\n  persons?: Maybe<Array<Maybe<Person>>>;\n  personsAggregate?: Maybe<PersonAggregateResult>;\n  storyID: Scalars['String'];\n  title?: Maybe<Scalars['String']>;\n};\n\n\nexport type StoryPersonsArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type StoryPersonsAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\nexport type StoryAggregateResult = {\n  __typename?: 'StoryAggregateResult';\n  count?: Maybe<Scalars['Int']>;\n  storyIDMax?: Maybe<Scalars['String']>;\n  storyIDMin?: Maybe<Scalars['String']>;\n  titleMax?: Maybe<Scalars['String']>;\n  titleMin?: Maybe<Scalars['String']>;\n};\n\nexport type StoryFilter = {\n  and?: Maybe<Array<Maybe<StoryFilter>>>;\n  has?: Maybe<StoryHasFilter>;\n  not?: Maybe<StoryFilter>;\n  or?: Maybe<Array<Maybe<StoryFilter>>>;\n  storyID?: Maybe<StringHashFilter>;\n  title?: Maybe<StringTermFilter>;\n};\n\nexport enum StoryHasFilter {\n  Persons = 'persons',\n  StoryId = 'storyID',\n  Title = 'title'\n}\n\nexport type StoryOrder = {\n  asc?: Maybe<StoryOrderable>;\n  desc?: Maybe<StoryOrderable>;\n  then?: Maybe<StoryOrder>;\n};\n\nexport enum StoryOrderable {\n  StoryId = 'storyID',\n  Title = 'title'\n}\n\nexport type StoryPatch = {\n  persons?: Maybe<Array<Maybe<PersonRef>>>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type StoryRef = {\n  persons?: Maybe<Array<Maybe<PersonRef>>>;\n  storyID?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type StringExactFilter = {\n  between?: Maybe<StringRange>;\n  eq?: Maybe<Scalars['String']>;\n  ge?: Maybe<Scalars['String']>;\n  gt?: Maybe<Scalars['String']>;\n  in?: Maybe<Array<Maybe<Scalars['String']>>>;\n  le?: Maybe<Scalars['String']>;\n  lt?: Maybe<Scalars['String']>;\n};\n\nexport type StringFullTextFilter = {\n  alloftext?: Maybe<Scalars['String']>;\n  anyoftext?: Maybe<Scalars['String']>;\n};\n\nexport type StringHashFilter = {\n  eq?: Maybe<Scalars['String']>;\n  in?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type StringRange = {\n  max: Scalars['String'];\n  min: Scalars['String'];\n};\n\nexport type StringRegExpFilter = {\n  regexp?: Maybe<Scalars['String']>;\n};\n\nexport type StringTermFilter = {\n  allofterms?: Maybe<Scalars['String']>;\n  anyofterms?: Maybe<Scalars['String']>;\n};\n\nexport type UpdatePersonInput = {\n  filter: PersonFilter;\n  remove?: Maybe<PersonPatch>;\n  set?: Maybe<PersonPatch>;\n};\n\nexport type UpdatePersonPayload = {\n  __typename?: 'UpdatePersonPayload';\n  numUids?: Maybe<Scalars['Int']>;\n  person?: Maybe<Array<Maybe<Person>>>;\n};\n\n\nexport type UpdatePersonPayloadPersonArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\nexport type UpdateStoryInput = {\n  filter: StoryFilter;\n  remove?: Maybe<StoryPatch>;\n  set?: Maybe<StoryPatch>;\n};\n\nexport type UpdateStoryPayload = {\n  __typename?: 'UpdateStoryPayload';\n  numUids?: Maybe<Scalars['Int']>;\n  story?: Maybe<Array<Maybe<Story>>>;\n};\n\n\nexport type UpdateStoryPayloadStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<StoryOrder>;\n};\n\nexport type WithinFilter = {\n  polygon: PolygonRef;\n};\n\nexport type GetAllPersonsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllPersonsQuery = (\n  { __typename?: 'Query' }\n  & { queryPerson?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonWithLinksFieldsFragment\n  )>>> }\n);\n\nexport type GetPersonByNameQueryVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type GetPersonByNameQuery = (\n  { __typename?: 'Query' }\n  & { queryPerson?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonWithLinksFieldsFragment\n  )>>> }\n);\n\nexport type GetPersonByUidQueryVariables = Exact<{\n  uid: Scalars['String'];\n}>;\n\n\nexport type GetPersonByUidQuery = (\n  { __typename?: 'Query' }\n  & { getPerson?: Maybe<(\n    { __typename?: 'Person' }\n    & PersonWithLinksFieldsFragment\n  )> }\n);\n\nexport type GetStartNodesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetStartNodesQuery = (\n  { __typename?: 'Query' }\n  & { queryPerson?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & { story?: Maybe<(\n      { __typename?: 'Story' }\n      & Pick<Story, 'title'>\n    )>, children?: Maybe<Array<Maybe<(\n      { __typename?: 'Person' }\n      & PersonFieldsFragment\n    )>>>, parents?: Maybe<Array<Maybe<(\n      { __typename?: 'Person' }\n      & PersonFieldsFragment\n    )>>>, nonBioChildren?: Maybe<Array<Maybe<(\n      { __typename?: 'Person' }\n      & PersonFieldsFragment\n    )>>> }\n    & PersonFieldsFragment\n  )>>> }\n);\n\nexport type PersonWithLinksFieldsFragment = (\n  { __typename?: 'Person' }\n  & { story?: Maybe<(\n    { __typename?: 'Story' }\n    & Pick<Story, 'title'>\n  )>, children?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, parents?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, nonBioChildren?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, nonBioParents?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, physicalRelation?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, otherRelation?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>> }\n  & PersonFieldsFragment\n);\n\nexport type PersonFieldsFragment = (\n  { __typename?: 'Person' }\n  & Pick<Person, 'personID' | 'name' | 'dateOfBirth' | 'nickNames' | 'gender'>\n);\n\nexport const PersonFieldsFragmentDoc = gql`\n    fragment PersonFields on Person {\n  personID\n  name\n  dateOfBirth\n  nickNames\n  gender\n}\n    `;\nexport const PersonWithLinksFieldsFragmentDoc = gql`\n    fragment PersonWithLinksFields on Person {\n  ...PersonFields\n  story {\n    title\n  }\n  children {\n    ...PersonFields\n  }\n  parents {\n    ...PersonFields\n  }\n  nonBioChildren {\n    ...PersonFields\n  }\n  nonBioParents {\n    ...PersonFields\n  }\n  physicalRelation {\n    ...PersonFields\n  }\n  otherRelation {\n    ...PersonFields\n  }\n}\n    ${PersonFieldsFragmentDoc}`;\nexport const GetAllPersonsDocument = gql`\n    query getAllPersons {\n  queryPerson {\n    ...PersonWithLinksFields\n  }\n}\n    ${PersonWithLinksFieldsFragmentDoc}`;\nexport const GetPersonByNameDocument = gql`\n    query getPersonByName($name: String!) {\n  queryPerson(filter: {name: {allofterms: $name}}) {\n    ...PersonWithLinksFields\n  }\n}\n    ${PersonWithLinksFieldsFragmentDoc}`;\nexport const GetPersonByUidDocument = gql`\n    query getPersonByUid($uid: String!) {\n  getPerson(personID: $uid) {\n    ...PersonWithLinksFields\n  }\n}\n    ${PersonWithLinksFieldsFragmentDoc}`;\nexport const GetStartNodesDocument = gql`\n    query getStartNodes {\n  queryPerson(filter: {name: {allofterms: \"Pa Salt\"}}) {\n    ...PersonFields\n    story {\n      title\n    }\n    children {\n      ...PersonFields\n    }\n    parents {\n      ...PersonFields\n    }\n    nonBioChildren {\n      ...PersonFields\n    }\n  }\n}\n    ${PersonFieldsFragmentDoc}`;\n\nexport type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = sdkFunction => sdkFunction();\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getAllPersons(variables?: GetAllPersonsQueryVariables): Promise<GetAllPersonsQuery> {\n      return withWrapper(() => client.request<GetAllPersonsQuery>(print(GetAllPersonsDocument), variables));\n    },\n    getPersonByName(variables: GetPersonByNameQueryVariables): Promise<GetPersonByNameQuery> {\n      return withWrapper(() => client.request<GetPersonByNameQuery>(print(GetPersonByNameDocument), variables));\n    },\n    getPersonByUid(variables: GetPersonByUidQueryVariables): Promise<GetPersonByUidQuery> {\n      return withWrapper(() => client.request<GetPersonByUidQuery>(print(GetPersonByUidDocument), variables));\n    },\n    getStartNodes(variables?: GetStartNodesQueryVariables): Promise<GetStartNodesQuery> {\n      return withWrapper(() => client.request<GetStartNodesQuery>(print(GetStartNodesDocument), variables));\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import React from \"react\";\nimport GraphiQL from \"graphiql\";\nimport { FetcherParams } from \"graphiql/dist/components/GraphiQL\";\n\nconst graphQLFetcher = async (graphQLParams: FetcherParams) => {\n  return (\n    await fetch(\"http://localhost:8080/graphql\", {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      // mode: \"cors\",\n      // credentials: \"omit\",\n      body: JSON.stringify(graphQLParams),\n    })\n  ).json();\n};\n\nconst GraphDebugger = () => {\n  return (\n    <>\n      <GraphiQL fetcher={graphQLFetcher} />\n      <p>test query:</p>\n      <pre>\n        {`// Get any person\n{\n  queryPerson {\n    __typename\n    personID\n    name\n  }\n}\n\n// Get any story\n{\n  queryStory {\n    __typename\n    title\n  }\n}\n\n// Get any person with related stories and persons\nquery getAllPersons {\n  queryPerson {\n    __typename\n    personID\n    name\n    nickNames\n    story {\n      title\n    }\n    parent {\n      __typename\n      name\n      personID\n    }\n  }\n}\n\n// Get a specific person by name and related persons sorted by name\nquery getPersonByName($name: String!) {\n  queryPerson(filter: { name: {allofterms: $name}}) {\n    __typename\n    personID\n    name\n    nonBioParent(order: { asc: name }, first: 15) {\n      name\n    }\n    parent(order: { asc: name }, first: 15) {\n      name\n    }\n  }\n}\n+\n{\n  \"name\": \"Pa\"\n}\n\n// TODO Get persons by related story title\n// See https://discuss.dgraph.io/t/filtering-by-relation/5757/2\n{\n  queryPersonWithStory(func: has(Person.story)) {\n    Person.uid\n    Person.name\n    Person.story @filter(eq(Story.title, \"The Storm Sister\")) {\n      Story.title \n    }\n  }\n}\n\n# Get story by title and all persons in it\nquery getStoryByTitle($title: String!) {\n  queryStory(filter: { title: {allofterms: $title}}) {\n    storyID\n    title\n    persons {\n      name\n    }\n  }\n}\n+\n{\n  \"title\": \"Storm\"\n}\n\n# Gets all persons and than filters stories, so non matching persons will still show up, but with story: null\nquery getPersonsByStoryTitle($title: String!) {\n  queryPerson(filter: { has:story}) {\n    __typename\n    personID\n    name\n    story(filter: { title: {allofterms: $title} }) {\n      title\n    }\n  }\n}\n+\n{\n  \"title\": \"Storm\"\n}\n\n# Test query inverse relation\n{\n  queryPerson {\n    __typename\n    personID\n    name\n    children {\n      name\n    }\n    parents {\n      name\n    }\n    nonBioChildren {\n      name\n    }\n    nonBioParents {\n      name\n    }\n  }\n}\n`}\n      </pre>\n    </>\n  );\n};\n\nexport default GraphDebugger;\n","import { GraphConfiguration, GraphLink, GraphNode } from \"react-d3-graph\";\n\nexport interface CustomNode extends GraphNode {\n  name: string;\n  x?: number,\n  y?: number,\n}\n\n// the graph configuration, just override the ones you need\nconst appGraphConfig = (width: number, height: number): GraphConfiguration<CustomNode, GraphLink> => ({\n  automaticRearrangeAfterDropNode: false,\n  collapsible: false,\n  directed: true,\n  focusAnimationDuration: 0.75,\n  focusZoom: 1,\n  //   freezeAllDragEvents: false,\n  height,\n  highlightDegree: 2,\n  highlightOpacity: 0.2,\n  linkHighlightBehavior: false,\n  maxZoom: 12,\n  minZoom: 0.05,\n  nodeHighlightBehavior: true,\n  panAndZoom: false,\n  staticGraph: false,\n  staticGraphWithDragAndDrop: true,\n  width,\n  d3: {\n    alphaTarget: 0.05,\n    gravity: -50,\n    linkLength: 120,\n    linkStrength: 2,\n    disableLinkForce: false,\n  },\n  node: {\n    color: \"#d3d3d3\",\n    fontColor: \"black\",\n    fontSize: 10,\n    fontWeight: \"normal\",\n    highlightColor: \"red\",\n    highlightFontSize: 14,\n    highlightFontWeight: \"bold\",\n    highlightStrokeColor: \"red\",\n    highlightStrokeWidth: 1.5,\n    mouseCursor: \"crosshair\",\n    opacity: 0.9,\n    renderLabel: true,\n    size: 200,\n    strokeColor: \"none\",\n    strokeWidth: 1.5,\n    svg: \"\",\n    symbolType: \"circle\",\n    labelProperty: (n: { name: string }) => n.name,\n  },\n  link: {\n    color: \"lightgray\",\n    fontColor: \"black\",\n    fontSize: 8,\n    fontWeight: \"normal\",\n    highlightColor: \"red\",\n    highlightFontSize: 8,\n    highlightFontWeight: \"normal\",\n    // labelProperty: (x) => x.source,\n    mouseCursor: \"pointer\",\n    opacity: 1,\n    renderLabel: true,\n    semanticStrokeWidth: true,\n    strokeWidth: 3,\n    markerHeight: 6,\n    markerWidth: 6,\n    // strokeDasharray: 0,\n    // strokeDashoffset: 0,\n    // strokeLinecap: \"butt\",\n  },\n});\n\nexport default appGraphConfig;\n","import { Maybe } from \"graphql/jsutils/Maybe\";\nimport { GraphLink } from \"react-d3-graph\";\nimport {\n  // Maybe,\n  PersonFieldsFragment,\n  PersonWithLinksFieldsFragment,\n} from \"../../generated/graphql\";\nimport { CustomNode } from \"./appGraphConfig\";\n\nconst genderColor = (gender?: Maybe<string>): string | undefined => {\n  if (gender === \"male\") {\n    return \"#357ae8\";\n  }\n  if (gender === \"female\") {\n    return \"#f50057\";\n  }\n  return;\n};\n\nconst convertPersonToNode = (originNode?: CustomNode) => ({\n  personID,\n  name,\n  gender,\n}: PersonWithLinksFieldsFragment): CustomNode => {\n  const node = {\n    id: personID || \"INVALID_PERSON_ID\",\n    name: name || \"INVALID_PERSON_NAME\",\n    color: genderColor(gender),\n  };\n  if (originNode && originNode.x && originNode.y) {\n    return {\n      ...node,\n      // TODO this can be improved by replacing random with radial, but it needs the total list of nodes that will be added\n      x: originNode.x + ((Math.random() - 0.5) * 200),\n      y: originNode.y + ((Math.random() - 0.5) * 200),\n    };\n  }\n  return node;\n};\n\nexport function isJustVal<T>(val: Maybe<T>): val is T {\n  return Boolean(val);\n}\n\nconst relationTypeColor = (type: string): string | undefined => {\n  if (type === \"children\" || type === \"parents\") {\n    return \"#141823\";\n  }\n  if (type === \"nonBioChildren\" || type === \"nonBioParents\") {\n    return \"#3f51b5\";\n  }\n  if (type === \"physicalRelation\") {\n    return \"#f50057\";\n  }\n};\n\nconst convertRelatedPersonToEdge = (type: string, personID: string) => (\n  person: PersonFieldsFragment | null\n): GraphLink => {\n  const otherPersonID = person?.personID ?? \"INVALID_PERSON_ID\";\n  const isInverted = type === \"parents\" || type === \"nonBioParents\";\n  const source = isInverted ? otherPersonID : personID;\n  const target = isInverted ? personID : otherPersonID;\n  return {\n    source,\n    target,\n    color: relationTypeColor(type),\n  };\n};\n\nexport const convertPersonsToGraphData = (\n  persons: PersonWithLinksFieldsFragment[],\n  originNode?: CustomNode\n): [CustomNode[], GraphLink[]] => {\n  const justPersons = persons?.filter(isJustVal) ?? [];\n\n  const nodes = justPersons.map<CustomNode>(convertPersonToNode(originNode));\n\n  // TODO should this not for tail too?\n  const relatedNodes = convertRelatedToNodes(justPersons[0], originNode);\n  const allNodes = nodes.concat(relatedNodes);\n\n  const links = justPersons.flatMap(\n    ({\n      personID,\n      children,\n      parents,\n      nonBioChildren,\n      nonBioParents,\n      physicalRelation,\n      otherRelation,\n    }) => {\n      const allRelations = {\n        children,\n        parents,\n        nonBioChildren,\n        nonBioParents,\n        physicalRelation,\n        otherRelation,\n      };\n      const edgesForAllRelations: GraphLink[] = Object.entries(\n        allRelations\n      ).flatMap(([relationType, relatedPersons]) => {\n        return relatedPersons\n          ? relatedPersons.map(\n              convertRelatedPersonToEdge(relationType, personID)\n            )\n          : [];\n      });\n      return edgesForAllRelations;\n    }\n  );\n\n  // TODO when \"Zed\" is added (e.g. by clicking \"Maia\"), the edge to \"Electra\" should be added directly.\n  const linksToExistingNodes = links.filter(\n    (link) =>\n      allNodes.some((n) => n.id === link.source) &&\n      allNodes.some((n) => n.id === link.target)\n  );\n\n  return [allNodes, linksToExistingNodes];\n};\n\nconst convertRelatedToNodes = (\n  {\n    children,\n    parents,\n    nonBioChildren,\n    nonBioParents,\n    physicalRelation,\n    otherRelation,\n  }: PersonWithLinksFieldsFragment,\n  originNode?: CustomNode\n): CustomNode[] => {\n  const allRelations = {\n    children,\n    parents,\n    nonBioChildren,\n    nonBioParents,\n    physicalRelation,\n    otherRelation,\n  };\n  const allRelatedPersons = Object.entries(allRelations)\n    .flatMap(([relationType, relatedPersons]) => relatedPersons)\n    .filter(isJustVal);\n  return allRelatedPersons.map<CustomNode>(convertPersonToNode(originNode));\n};\n","const GraphTools = () => {\n  // TODO add dropdown\n  // TODO wrap in Card and overlay over graph\n  // TODO add \"details\" view Card in corner\n  return (\n    <div style={{ position: \"absolute\" }}>Search by book: TODO dropdown</div>\n  );\n};\n\nexport default GraphTools;\n","import { Graph, GraphData, GraphLink } from \"react-d3-graph\";\nimport { getSdk } from \"../../generated/graphql\";\nimport appGraphConfig, { CustomNode } from \"./appGraphConfig\";\nimport { GraphQLClient } from \"graphql-request\";\nimport { FC, useEffect, useRef, useState } from \"react\";\nimport {\n  convertPersonsToGraphData,\n  isJustVal,\n} from \"./convertPersonsToGraphData\";\nimport GraphTools from \"./GraphTools\";\n// import getConnectedToNameDQL from \"../../dql/getPersonsByRelation\";\n\n// const client = new ApolloClient({\n//   cache: new InMemoryCache(),\n//   uri: \"http://localhost:8080/graphql\",\n// });\n\nconst client = new GraphQLClient(process.env[\"REACT_APP_GRAPHQL_URL\"] || \"\", {\n  headers: {},\n});\n\nconst GraphQuery: FC = () => {\n  const [graphData, setGraphData] = useState<GraphData<CustomNode, GraphLink>>({\n    nodes: [],\n    links: [],\n  });\n  const { getPersonByUid, getStartNodes } = getSdk(client);\n  const graphRef = useRef();\n\n  const initialize = async () => {\n    try {\n      const { queryPerson } = await getStartNodes();\n\n      const justPersons = queryPerson?.filter(isJustVal) ?? [];\n\n      const [nodes, links] = convertPersonsToGraphData(justPersons);\n\n      // TODO use filterUniqueNodes(nodes) and filterUniqueLinks(links)\n      setGraphData({\n        nodes,\n        links,\n      });\n      // console.log(nodes, links);\n\n      const getElem = document.getElementById(\n        \"graph-id-graph-container-zoomable\"\n      );\n      if (getElem) {\n        // const graphInst = graphRef.current;\n        // if (graphInst) {\n        //   (graphRef.current as any).focusAnimationTimeout = 1000;\n        //   console.log(\"graphref\", graphRef.current);\n        //   // (graphInst as any).resetNodesPositions();\n        //   // (graphRef.current as any).restartSimulation();\n        // }        console.log(\"elem found\");\n        // TODO focusedNodeId does not work with async, but this does. Fix to use ref instead of getElementById. Also calculate translate based on canvas size.\n        // TODO also fix when dragging\n        getElem.setAttribute(\"transform\", \"translate(790,334) scale(1)\");\n      } else {\n        console.log(\"no elem\");\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n  }, []);\n\n  const onClickNode = (uid: string, originNode: CustomNode) => {\n    // console.log(\"onclicknode\", uid, originNode);\n    // getConnectedToNameDQL(name);\n\n    (async () => {\n      try {\n        const { getPerson } = await getPersonByUid({ uid });\n        const persons = getPerson ? [getPerson].filter(isJustVal) : [];\n        const [nodes, links] = persons\n          ? convertPersonsToGraphData(persons, originNode)\n          : [[], []];\n\n        // TODO use filterUniqueNodes(nodes) and filterUniqueLinks(links)\n        setGraphData({\n          nodes: graphData?.nodes ? graphData.nodes.concat(nodes) : [],\n          links: graphData?.links ? graphData.links.concat(links) : [],\n        });\n\n        // const graphInst = graphRef.current;\n        // if (graphInst) {\n        //   console.log(\"graphref\", graphRef.current);\n        //   // (graphInst as any).resetNodesPositions();\n        // }\n      } catch (err) {\n        console.error(err);\n      }\n    })();\n  };\n\n  useEffect(() => {\n    console.log(graphData);\n    // TODO deduplicate nodes and edges\n  }, [graphData]);\n\n  return (\n    <>\n      {/* <div className={classes.root}>\n        <Typography id=\"range-slider\" gutterBottom>\n          Time range\n        </Typography>\n        <Slider\n          value={value}\n          onChange={handleChange}\n          valueLabelDisplay=\"auto\"\n          aria-labelledby=\"range-slider\"\n          getAriaValueText={valuetext}\n        />\n      </div> */}\n      <GraphTools />\n      {graphData && graphData.nodes.length > 0 && (\n        <Graph\n          id=\"graph-id\" // id is mandatory\n          ref={graphRef as any}\n          data={{ ...graphData }}\n          config={appGraphConfig(\n            window.innerWidth,\n            window.innerHeight - 64 - 5\n          )}\n          onClickNode={onClickNode as any}\n          onClickGraph={() => {\n            console.log(\"click\");\n          }}\n          //   onClickLink={onClickLink}\n          // onNodePositionChange={(n, x, y) => {\n          //   console.log(`Node ${n} moved to ${x},${y}`);\n          // }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GraphQuery;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(-330 -620)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  xmlnsXlink: \"http://www.w3.org/1999/xlink\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M356.855,633.282c0.058,0.4,0.102,0.806,0.119,1.218h-0.81c-0.2,0.333-0.413,0.666-0.634,1h1.443    c-0.113,2.733-1.134,5.235-2.783,7.201c-0.805-0.464-1.719-0.862-2.709-1.192c0.153-0.456,0.289-0.93,0.409-1.418    c-0.289,0.309-0.578,0.617-0.881,0.92c-0.367,0.367-0.741,0.723-1.117,1.069c0.104,0.025,0.212,0.046,0.313,0.072    c-1.093,2.703-2.781,4.528-4.707,4.801v-1.422c-0.334,0.221-0.667,0.434-1,0.634v0.788c-0.309-0.044-0.608-0.141-0.903-0.262    c-0.61,0.336-1.215,0.625-1.813,0.889c1.03,0.264,2.104,0.42,3.217,0.42c3.699,0,7.028-1.552,9.396-4.031    c0.224-0.234,0.446-0.471,0.652-0.721c1.844-2.244,2.952-5.117,2.952-8.248c0-1.117-0.146-2.2-0.412-3.235    C357.368,632.267,357.127,632.772,356.855,633.282z M348.521,646.471c1.049-0.972,1.947-2.363,2.625-4.043    c0.868,0.282,1.671,0.617,2.379,1.005C352.149,644.824,350.438,645.881,348.521,646.471z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M334.952,643.248c0.206,0.25,0.429,0.486,0.652,0.721c0.633,0.662,1.338,1.253,2.097,1.771    c0.436-0.072,0.892-0.176,1.375-0.327c-0.953-0.545-1.834-1.203-2.602-1.979c0.708-0.388,1.511-0.723,2.379-1.005    c0.387,0.96,0.854,1.812,1.371,2.559c0.297-0.123,0.595-0.25,0.896-0.394c-0.502-0.694-0.952-1.511-1.328-2.44    c1.436-0.376,3.025-0.601,4.707-0.639v1.083c0.334-0.233,0.667-0.478,1-0.731v-0.352c0.141,0.003,0.276,0.016,0.416,0.021    c0.376-0.298,0.749-0.607,1.12-0.929c-0.504-0.046-1.015-0.08-1.536-0.092V635.5h5.986c-0.004,0.174-0.021,0.341-0.029,0.513    c0.4-0.503,0.785-1.007,1.14-1.513h-0.111c-0.048-2.184-0.405-4.229-1.003-6.009c0.99-0.33,1.904-0.729,2.709-1.192    c0.461,0.549,0.866,1.144,1.223,1.77c0.152-0.488,0.257-0.949,0.328-1.386c-0.219-0.32-0.449-0.632-0.694-0.931    c-0.206-0.25-0.429-0.486-0.652-0.721C352.028,623.552,348.699,622,345,622s-7.028,1.552-9.396,4.031    c-0.224,0.234-0.446,0.471-0.652,0.721C333.108,628.996,332,631.869,332,635S333.108,641.004,334.952,643.248z M353.525,626.567    c-0.708,0.388-1.511,0.723-2.379,1.005c-0.678-1.68-1.576-3.071-2.625-4.043C350.438,624.119,352.149,625.176,353.525,626.567z     M345.5,623.047c1.926,0.272,3.614,2.098,4.707,4.801c-1.436,0.376-3.025,0.601-4.707,0.639V623.047z M345.5,629.485    c1.8-0.04,3.504-0.29,5.046-0.712c0.557,1.684,0.894,3.635,0.94,5.727H345.5V629.485z M344.5,640.515    c-1.8,0.04-3.504,0.29-5.046,0.712c-0.557-1.684-0.894-3.635-0.94-5.727h5.986V640.515z M344.5,634.5h-5.986    c0.047-2.092,0.384-4.043,0.94-5.727c1.542,0.422,3.246,0.672,5.046,0.712V634.5z M344.5,623.047v5.439    c-1.682-0.038-3.271-0.263-4.707-0.639C340.886,625.145,342.574,623.319,344.5,623.047z M341.479,623.529    c-1.049,0.972-1.947,2.363-2.625,4.043c-0.868-0.282-1.671-0.617-2.379-1.005C337.851,625.176,339.563,624.119,341.479,623.529z     M335.809,627.299c0.805,0.464,1.719,0.862,2.709,1.192c-0.598,1.78-0.955,3.825-1.003,6.009h-4.489    C333.139,631.767,334.159,629.265,335.809,627.299z M337.515,635.5c0.048,2.184,0.405,4.229,1.003,6.009    c-0.99,0.33-1.904,0.729-2.709,1.192c-1.649-1.966-2.67-4.468-2.783-7.201H337.515z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M340.683,646.966c3.134-1.227,6.551-3.593,9.621-6.662c3.069-3.07,5.436-6.487,6.662-9.621    c1.171-2.992,1.167-5.422,0.031-6.941l1.031-0.273l0.743-0.197l-1.325-0.557l-1.109-0.465l-2.521-1.059l1.059,2.521l0.51,1.214    l0.372,0.886l0.141,0.335l0.433-1.633c0.774,1.25,0.679,3.316-0.296,5.805c-1.177,3.009-3.463,6.305-6.438,9.279    s-6.271,5.261-9.279,6.438c-1.388,0.543-2.642,0.81-3.698,0.809c-1.102-0.001-1.989-0.293-2.579-0.883    c-0.735-0.735-1.01-1.931-0.83-3.431c-0.278-0.435-0.529-0.886-0.759-1.352c-0.584,2.393-0.297,4.312,0.882,5.489    c0.79,0.79,1.907,1.187,3.279,1.187c0.001,0,0.002,0,0.003,0C337.799,647.853,339.17,647.558,340.683,646.966z\"\n})));\n\nfunction SvgArmillarysphere(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: \"300px\",\n    width: \"300px\",\n    fill: \"#000000\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 30 30\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArmillarysphere);\nexport default __webpack_public_path__ + \"static/media/armillarysphere.3317b928.svg\";\nexport { ForwardRef as ReactComponent };","import { FC } from \"react\";\nimport SvgIcon from \"@material-ui/core/SvgIcon\";\nimport { ReactComponent } from \"../../armillarysphere.svg\";\n\ninterface Props {\n  className?: string;\n}\n\nconst ArmillarySphereIcon: FC<Props> = ({ className }) => {\n  return (\n    <SvgIcon\n      className={className}\n      viewBox=\"0 0 30 30\"\n      component={ReactComponent}\n    />\n  );\n};\n\nexport default ArmillarySphereIcon;\n","import Toolbar from \"@material-ui/core/Toolbar/Toolbar\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport {\n  Link as RouterLink,\n} from \"react-router-dom\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport ArmillarySphereIcon from \"../ArmillarySphereIcon/ArmillarySphereIcon\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    appIcon: {\n      marginRight: theme.spacing(2),\n      height: \"3rem\",\n      width: \"3rem\",\n      \"& g\": {\n        fill: \"white\",\n      },\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }));\n\nconst AppToolbar = () => {\n    const classes = useStyles();\n    return (\n    <Toolbar>\n      <ArmillarySphereIcon className={classes.appIcon} />\n      <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n        Seven Sisters characters graph\n      </Typography>\n      <Button color=\"inherit\" component={RouterLink} to=\"/\">\n        Graph\n      </Button>\n      <Button color=\"inherit\" component={RouterLink} to=\"/debugger\">\n        Debugger\n      </Button>\n      <Button color=\"inherit\" href=\"http://localhost:8001/?latest\">\n        Ratel\n      </Button>\n      <Button color=\"inherit\" href=\"https://github.com/mdvanes/7sgraph/issues\">\n        Github (issues)\n      </Button>\n    </Toolbar>\n  );\n};\n\nexport default AppToolbar;\n","import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  DialogContentText,\n  Button,\n  Typography\n} from \"@material-ui/core\";\n\nconst StartDialog = () => {\n  const dialogHasBeenSeen = localStorage.getItem(\"dialogHasBeenSeen\") === \"true\" || false;\n  const [open, setOpen] = useState(!dialogHasBeenSeen);\n  return (\n    <Dialog\n      open={open}\n      disableBackdropClick\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Spoiler Alert & Disclaimer\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n            <Typography color=\"primary\">This app contains spoilers for The Seven Sisters books by Lucinda Riley.</Typography>\n            <Typography>I do not own the rights to any of the characters or books mentioned.</Typography>\n            <Typography>The data may be incomplete or inaccurate, you may file an issue on Github if you want to have this fixed.</Typography>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            localStorage.setItem(\"dialogHasBeenSeen\", \"true\");\n            setOpen(false);\n          }}\n          color=\"primary\"\n          autoFocus\n        >\n          I agree, hide this message in the future.\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default StartDialog;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"graphiql/graphiql.css\";\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport GraphDebugger from \"./components/GraphDebugger/GraphDebugger\";\nimport GraphQuery from \"./components/GraphQuery/GraphQuery\";\nimport AppToolbar from \"./components/AppToolbar/AppToolbar\";\nimport StartDialog from \"./components/StartDialog/StartDialog\";\n\nfunction App() {\n  return (\n    <Router>\n      <StartDialog />\n      <div className=\"App\">\n        <AppBar position=\"static\">\n          <AppToolbar />\n        </AppBar>\n        <Switch>\n          <Route path=\"/debugger\">\n            <GraphDebugger />\n          </Route>\n          <Route path=\"/\">\n            <GraphQuery />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}