{"version":3,"sources":["generated/graphql.ts","components/GraphDebugger/GraphDebugger.tsx","components/GraphQuery/appGraphConfig.ts","components/GraphQuery/convertPersonsToGraphData.ts","context/actions.ts","context/reducer.ts","context/GraphSettingsContext.tsx","components/GraphTools/GraphTools.styles.ts","components/GraphTools/BookSelector.tsx","components/GraphTools/TimeRangeSlider.tsx","components/GraphTools/GraphTools.tsx","components/GraphQuery/graphClient.ts","components/GraphDetails/GraphDetails.styles.tsx","components/GraphDetails/GraphDetailsCard.tsx","components/GraphDetails/GraphDetails.tsx","components/GraphQuery/parseDate.ts","components/GraphQuery/graphQueryUtils.ts","components/GraphQuery/GraphQuery.tsx","armillarysphere.svg","components/ArmillarySphereIcon/ArmillarySphereIcon.tsx","components/AppToolbar/AppToolbar.tsx","components/StartDialog/StartDialog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DgraphIndex","HttpMethod","Mode","PersonHasFilter","PersonOrderable","StoryHasFilter","StoryOrderable","graphQLFetcher","graphQLParams","a","fetch","method","headers","body","JSON","stringify","json","GraphDebugger","fetcher","PersonFieldsFragmentDoc","PersonWithLinksFieldsFragmentDoc","GetAllPersonsDocument","GetPersonByNameDocument","GetPersonByUidDocument","GetPersonDetailsByUidDocument","GetStartNodesDocument","GetStoryByIdDocument","defaultWrapper","sdkFunction","getSdk","client","withWrapper","getAllPersons","variables","request","print","getPersonByName","getPersonByUid","getPersonDetailsByUid","getStartNodes","getStoryById","appGraphConfig","width","height","automaticRearrangeAfterDropNode","collapsible","directed","focusAnimationDuration","focusZoom","highlightDegree","highlightOpacity","linkHighlightBehavior","maxZoom","minZoom","nodeHighlightBehavior","panAndZoom","staticGraph","staticGraphWithDragAndDrop","d3","alphaTarget","gravity","linkLength","linkStrength","disableLinkForce","node","color","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","mouseCursor","opacity","renderLabel","size","strokeColor","strokeWidth","svg","symbolType","labelProperty","n","name","link","semanticStrokeWidth","markerHeight","markerWidth","genderColor","gender","convertPersonToNode","originNode","personID","cx","cy","dateOfBirth","dateOfDeath","id","undefined","x","y","Math","random","isJustVal","val","Boolean","relationTypeColor","type","convertPersonsToGraphData","persons","justPersons","filter","nodes","map","relatedNodes","convertRelatedToNodes","allNodes","concat","linksToExistingNodes","flatMap","allRelations","children","parents","nonBioChildren","nonBioParents","physicalRelation","otherRelation","Object","entries","relationType","relatedPersons","person","otherPersonID","isInverted","source","target","convertRelatedPersonToEdge","some","SET_BOOK_FILTER","SET_DETAILS_FOR","SET_TIME_RANGE","SET_LITE_MODE","initialState","isLiteMode","searchByBook","detailsFor","timeRange","reducer","state","action","payload","Error","GraphSettingsContext","createContext","dispatch","GraphSettingsProvider","useReducer","Provider","value","useGraphSettingsContext","useContext","useStyles","makeStyles","theme","root","position","spacing","margin","transition","closed","overflow","gridRoot","flexGrow","cardRoot","backgroundColor","cardContentRoot","paddingBottom","formControlRoot","collapseButton","left","top","BookSelector","onChange","classes","warning","Tooltip","title","Link","href","Typography","variant","formControl","FormControl","InputLabel","Select","labelId","label","MenuItem","TimeRangeSlider","gutterBottom","style","paddingLeft","Slider","event","newValue","valueLabelDisplay","aria-labelledby","min","max","GraphTools","useState","isOpen","setIsOpen","rootClass","className","Card","CardContent","Grid","container","item","xs","sm","md","IconButton","aria-label","onClick","ExpandLess","ExpandMore","GraphQLClient","process","bottom","right","GraphDetailsCard","dod","uid","nickNames","story","isFallback","close","CardHeader","Close","length","join","align","GraphDetails","fallback","setPerson","memoizedInitialize","useCallback","getPerson","console","error","useEffect","closeCard","isDateRange","date","indexOf","parseDateRange","dateRange","split","fromStr","toStr","parseInt","filterUniqueLinks","links","compoundIdsToLinks","l","values","fromEntries","getMaybePersons","queryPerson","getStory","allJson","data","GraphQuery","isSmall","useMediaQuery","graphData","setGraphData","filteredGraphData","setFilteredGraphData","graphRef","useRef","maybePersons","lastNode","focusedNodeId","startDate","endDate","filteredNodes","isBornBeforeEnd","getIsBornBeforeEnd","getIsAliveAfterStart","graphHeight","window","innerHeight","ref","config","innerWidth","onClickNode","onClickGraph","document","getElementById","graphInst","current","nodeCoords","log","_extends","assign","i","arguments","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","transform","xmlns","xmlnsXlink","d","SvgArmillarysphere","_ref","svgRef","titleId","props","fill","viewBox","xmlSpace","ForwardRef","ArmillarySphereIcon","SvgIcon","component","ReactComponent","appIcon","marginRight","AppToolbar","Hidden","smUp","minHeight","xsDown","Button","RouterLink","to","StartDialog","dialogHasBeenSeen","localStorage","getItem","open","setOpen","Dialog","disableBackdropClick","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","setItem","autoFocus","App","AppBar","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.94d90682.chunk.js","sourcesContent":["import { GraphQLClient } from 'graphql-request';\nimport { print } from 'graphql';\nimport { gql } from 'graphql.macro';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * The DateTime scalar type represents date and time as a string in RFC3339 format.\n   * For example: \"1985-04-12T23:20:50.52Z\" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.\n   */\n  DateTime: any;\n  /**\n   * The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.\n   * Int64 can represent values in range [-(2^63),(2^63 - 1)].\n   */\n  Int64: any;\n};\n\nexport type AddPersonInput = {\n  children?: Maybe<Array<Maybe<PersonRef>>>;\n  cx?: Maybe<Scalars['Float']>;\n  cy?: Maybe<Scalars['Float']>;\n  dateOfBirth?: Maybe<Scalars['String']>;\n  dateOfDeath?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  location?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  name?: Maybe<Scalars['String']>;\n  nickNames?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nonBioChildren?: Maybe<Array<Maybe<PersonRef>>>;\n  nonBioParents?: Maybe<Array<Maybe<PersonRef>>>;\n  otherRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  parents?: Maybe<Array<Maybe<PersonRef>>>;\n  personID: Scalars['String'];\n  physicalRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  story?: Maybe<StoryRef>;\n};\n\nexport type AddPersonPayload = {\n  __typename?: 'AddPersonPayload';\n  numUids?: Maybe<Scalars['Int']>;\n  person?: Maybe<Array<Maybe<Person>>>;\n};\n\n\nexport type AddPersonPayloadPersonArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\nexport type AddStoryInput = {\n  persons?: Maybe<Array<Maybe<PersonRef>>>;\n  storyID: Scalars['String'];\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type AddStoryPayload = {\n  __typename?: 'AddStoryPayload';\n  numUids?: Maybe<Scalars['Int']>;\n  story?: Maybe<Array<Maybe<Story>>>;\n};\n\n\nexport type AddStoryPayloadStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<StoryOrder>;\n};\n\nexport type AuthRule = {\n  and?: Maybe<Array<Maybe<AuthRule>>>;\n  not?: Maybe<AuthRule>;\n  or?: Maybe<Array<Maybe<AuthRule>>>;\n  rule?: Maybe<Scalars['String']>;\n};\n\nexport type ContainsFilter = {\n  point?: Maybe<PointRef>;\n  polygon?: Maybe<PolygonRef>;\n};\n\nexport type CustomHttp = {\n  body?: Maybe<Scalars['String']>;\n  forwardHeaders?: Maybe<Array<Scalars['String']>>;\n  graphql?: Maybe<Scalars['String']>;\n  introspectionHeaders?: Maybe<Array<Scalars['String']>>;\n  method: HttpMethod;\n  mode?: Maybe<Mode>;\n  secretHeaders?: Maybe<Array<Scalars['String']>>;\n  skipIntrospection?: Maybe<Scalars['Boolean']>;\n  url: Scalars['String'];\n};\n\n\nexport type DateTimeFilter = {\n  between?: Maybe<DateTimeRange>;\n  eq?: Maybe<Scalars['DateTime']>;\n  ge?: Maybe<Scalars['DateTime']>;\n  gt?: Maybe<Scalars['DateTime']>;\n  le?: Maybe<Scalars['DateTime']>;\n  lt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type DateTimeRange = {\n  max: Scalars['DateTime'];\n  min: Scalars['DateTime'];\n};\n\nexport type DeletePersonPayload = {\n  __typename?: 'DeletePersonPayload';\n  msg?: Maybe<Scalars['String']>;\n  numUids?: Maybe<Scalars['Int']>;\n  person?: Maybe<Array<Maybe<Person>>>;\n};\n\n\nexport type DeletePersonPayloadPersonArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\nexport type DeleteStoryPayload = {\n  __typename?: 'DeleteStoryPayload';\n  msg?: Maybe<Scalars['String']>;\n  numUids?: Maybe<Scalars['Int']>;\n  story?: Maybe<Array<Maybe<Story>>>;\n};\n\n\nexport type DeleteStoryPayloadStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<StoryOrder>;\n};\n\nexport enum DgraphIndex {\n  Bool = 'bool',\n  Day = 'day',\n  Exact = 'exact',\n  Float = 'float',\n  Fulltext = 'fulltext',\n  Geo = 'geo',\n  Hash = 'hash',\n  Hour = 'hour',\n  Int = 'int',\n  Int64 = 'int64',\n  Month = 'month',\n  Regexp = 'regexp',\n  Term = 'term',\n  Trigram = 'trigram',\n  Year = 'year'\n}\n\nexport type FloatFilter = {\n  between?: Maybe<FloatRange>;\n  eq?: Maybe<Scalars['Float']>;\n  ge?: Maybe<Scalars['Float']>;\n  gt?: Maybe<Scalars['Float']>;\n  le?: Maybe<Scalars['Float']>;\n  lt?: Maybe<Scalars['Float']>;\n};\n\nexport type FloatRange = {\n  max: Scalars['Float'];\n  min: Scalars['Float'];\n};\n\nexport type GenerateMutationParams = {\n  add?: Maybe<Scalars['Boolean']>;\n  delete?: Maybe<Scalars['Boolean']>;\n  update?: Maybe<Scalars['Boolean']>;\n};\n\nexport type GenerateQueryParams = {\n  aggregate?: Maybe<Scalars['Boolean']>;\n  get?: Maybe<Scalars['Boolean']>;\n  password?: Maybe<Scalars['Boolean']>;\n  query?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum HttpMethod {\n  Delete = 'DELETE',\n  Get = 'GET',\n  Patch = 'PATCH',\n  Post = 'POST',\n  Put = 'PUT'\n}\n\n\nexport type Int64Filter = {\n  between?: Maybe<Int64Range>;\n  eq?: Maybe<Scalars['Int64']>;\n  ge?: Maybe<Scalars['Int64']>;\n  gt?: Maybe<Scalars['Int64']>;\n  le?: Maybe<Scalars['Int64']>;\n  lt?: Maybe<Scalars['Int64']>;\n};\n\nexport type Int64Range = {\n  max: Scalars['Int64'];\n  min: Scalars['Int64'];\n};\n\nexport type IntFilter = {\n  between?: Maybe<IntRange>;\n  eq?: Maybe<Scalars['Int']>;\n  ge?: Maybe<Scalars['Int']>;\n  gt?: Maybe<Scalars['Int']>;\n  le?: Maybe<Scalars['Int']>;\n  lt?: Maybe<Scalars['Int']>;\n};\n\nexport type IntRange = {\n  max: Scalars['Int'];\n  min: Scalars['Int'];\n};\n\nexport type IntersectsFilter = {\n  multiPolygon?: Maybe<MultiPolygonRef>;\n  polygon?: Maybe<PolygonRef>;\n};\n\nexport enum Mode {\n  Batch = 'BATCH',\n  Single = 'SINGLE'\n}\n\nexport type MultiPolygon = {\n  __typename?: 'MultiPolygon';\n  polygons: Array<Polygon>;\n};\n\nexport type MultiPolygonRef = {\n  polygons: Array<PolygonRef>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addPerson?: Maybe<AddPersonPayload>;\n  addStory?: Maybe<AddStoryPayload>;\n  deletePerson?: Maybe<DeletePersonPayload>;\n  deleteStory?: Maybe<DeleteStoryPayload>;\n  updatePerson?: Maybe<UpdatePersonPayload>;\n  updateStory?: Maybe<UpdateStoryPayload>;\n};\n\n\nexport type MutationAddPersonArgs = {\n  input: Array<AddPersonInput>;\n};\n\n\nexport type MutationAddStoryArgs = {\n  input: Array<AddStoryInput>;\n};\n\n\nexport type MutationDeletePersonArgs = {\n  filter: PersonFilter;\n};\n\n\nexport type MutationDeleteStoryArgs = {\n  filter: StoryFilter;\n};\n\n\nexport type MutationUpdatePersonArgs = {\n  input: UpdatePersonInput;\n};\n\n\nexport type MutationUpdateStoryArgs = {\n  input: UpdateStoryInput;\n};\n\nexport type NearFilter = {\n  coordinate: PointRef;\n  distance: Scalars['Float'];\n};\n\nexport type Person = {\n  __typename?: 'Person';\n  children?: Maybe<Array<Maybe<Person>>>;\n  childrenAggregate?: Maybe<PersonAggregateResult>;\n  cx?: Maybe<Scalars['Float']>;\n  cy?: Maybe<Scalars['Float']>;\n  dateOfBirth?: Maybe<Scalars['String']>;\n  dateOfDeath?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  location?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  name?: Maybe<Scalars['String']>;\n  nickNames?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nonBioChildren?: Maybe<Array<Maybe<Person>>>;\n  nonBioChildrenAggregate?: Maybe<PersonAggregateResult>;\n  nonBioParents?: Maybe<Array<Maybe<Person>>>;\n  nonBioParentsAggregate?: Maybe<PersonAggregateResult>;\n  otherRelation?: Maybe<Array<Maybe<Person>>>;\n  otherRelationAggregate?: Maybe<PersonAggregateResult>;\n  parents?: Maybe<Array<Maybe<Person>>>;\n  parentsAggregate?: Maybe<PersonAggregateResult>;\n  personID: Scalars['String'];\n  physicalRelation?: Maybe<Array<Maybe<Person>>>;\n  physicalRelationAggregate?: Maybe<PersonAggregateResult>;\n  story?: Maybe<Story>;\n};\n\n\nexport type PersonChildrenArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonChildrenAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonNonBioChildrenArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonNonBioChildrenAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonNonBioParentsArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonNonBioParentsAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonOtherRelationArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonOtherRelationAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonParentsArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonParentsAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonPhysicalRelationArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type PersonPhysicalRelationAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type PersonStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n};\n\nexport type PersonAggregateResult = {\n  __typename?: 'PersonAggregateResult';\n  count?: Maybe<Scalars['Int']>;\n  cxAvg?: Maybe<Scalars['Float']>;\n  cxMax?: Maybe<Scalars['Float']>;\n  cxMin?: Maybe<Scalars['Float']>;\n  cxSum?: Maybe<Scalars['Float']>;\n  cyAvg?: Maybe<Scalars['Float']>;\n  cyMax?: Maybe<Scalars['Float']>;\n  cyMin?: Maybe<Scalars['Float']>;\n  cySum?: Maybe<Scalars['Float']>;\n  dateOfBirthMax?: Maybe<Scalars['String']>;\n  dateOfBirthMin?: Maybe<Scalars['String']>;\n  dateOfDeathMax?: Maybe<Scalars['String']>;\n  dateOfDeathMin?: Maybe<Scalars['String']>;\n  genderMax?: Maybe<Scalars['String']>;\n  genderMin?: Maybe<Scalars['String']>;\n  nameMax?: Maybe<Scalars['String']>;\n  nameMin?: Maybe<Scalars['String']>;\n  personIDMax?: Maybe<Scalars['String']>;\n  personIDMin?: Maybe<Scalars['String']>;\n};\n\nexport type PersonFilter = {\n  and?: Maybe<Array<Maybe<PersonFilter>>>;\n  has?: Maybe<PersonHasFilter>;\n  name?: Maybe<StringTermFilter>;\n  not?: Maybe<PersonFilter>;\n  or?: Maybe<Array<Maybe<PersonFilter>>>;\n  personID?: Maybe<StringHashFilter>;\n};\n\nexport enum PersonHasFilter {\n  Children = 'children',\n  Cx = 'cx',\n  Cy = 'cy',\n  DateOfBirth = 'dateOfBirth',\n  DateOfDeath = 'dateOfDeath',\n  Gender = 'gender',\n  Location = 'location',\n  Name = 'name',\n  NickNames = 'nickNames',\n  NonBioChildren = 'nonBioChildren',\n  NonBioParents = 'nonBioParents',\n  OtherRelation = 'otherRelation',\n  Parents = 'parents',\n  PersonId = 'personID',\n  PhysicalRelation = 'physicalRelation',\n  Story = 'story'\n}\n\nexport type PersonOrder = {\n  asc?: Maybe<PersonOrderable>;\n  desc?: Maybe<PersonOrderable>;\n  then?: Maybe<PersonOrder>;\n};\n\nexport enum PersonOrderable {\n  Cx = 'cx',\n  Cy = 'cy',\n  DateOfBirth = 'dateOfBirth',\n  DateOfDeath = 'dateOfDeath',\n  Gender = 'gender',\n  Name = 'name',\n  PersonId = 'personID'\n}\n\nexport type PersonPatch = {\n  children?: Maybe<Array<Maybe<PersonRef>>>;\n  cx?: Maybe<Scalars['Float']>;\n  cy?: Maybe<Scalars['Float']>;\n  dateOfBirth?: Maybe<Scalars['String']>;\n  dateOfDeath?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  location?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  name?: Maybe<Scalars['String']>;\n  nickNames?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nonBioChildren?: Maybe<Array<Maybe<PersonRef>>>;\n  nonBioParents?: Maybe<Array<Maybe<PersonRef>>>;\n  otherRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  parents?: Maybe<Array<Maybe<PersonRef>>>;\n  physicalRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  story?: Maybe<StoryRef>;\n};\n\nexport type PersonRef = {\n  children?: Maybe<Array<Maybe<PersonRef>>>;\n  cx?: Maybe<Scalars['Float']>;\n  cy?: Maybe<Scalars['Float']>;\n  dateOfBirth?: Maybe<Scalars['String']>;\n  dateOfDeath?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  location?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  name?: Maybe<Scalars['String']>;\n  nickNames?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nonBioChildren?: Maybe<Array<Maybe<PersonRef>>>;\n  nonBioParents?: Maybe<Array<Maybe<PersonRef>>>;\n  otherRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  parents?: Maybe<Array<Maybe<PersonRef>>>;\n  personID?: Maybe<Scalars['String']>;\n  physicalRelation?: Maybe<Array<Maybe<PersonRef>>>;\n  story?: Maybe<StoryRef>;\n};\n\nexport type Point = {\n  __typename?: 'Point';\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\nexport type PointGeoFilter = {\n  near?: Maybe<NearFilter>;\n  within?: Maybe<WithinFilter>;\n};\n\nexport type PointList = {\n  __typename?: 'PointList';\n  points: Array<Point>;\n};\n\nexport type PointListRef = {\n  points: Array<PointRef>;\n};\n\nexport type PointRef = {\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\nexport type Polygon = {\n  __typename?: 'Polygon';\n  coordinates: Array<PointList>;\n};\n\nexport type PolygonGeoFilter = {\n  contains?: Maybe<ContainsFilter>;\n  intersects?: Maybe<IntersectsFilter>;\n  near?: Maybe<NearFilter>;\n  within?: Maybe<WithinFilter>;\n};\n\nexport type PolygonRef = {\n  coordinates: Array<PointListRef>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  aggregatePerson?: Maybe<PersonAggregateResult>;\n  aggregateStory?: Maybe<StoryAggregateResult>;\n  getPerson?: Maybe<Person>;\n  getStory?: Maybe<Story>;\n  queryPerson?: Maybe<Array<Maybe<Person>>>;\n  queryStory?: Maybe<Array<Maybe<Story>>>;\n};\n\n\nexport type QueryAggregatePersonArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\n\nexport type QueryAggregateStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n};\n\n\nexport type QueryGetPersonArgs = {\n  personID: Scalars['String'];\n};\n\n\nexport type QueryGetStoryArgs = {\n  storyID: Scalars['String'];\n};\n\n\nexport type QueryQueryPersonArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type QueryQueryStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<StoryOrder>;\n};\n\nexport type Story = {\n  __typename?: 'Story';\n  persons?: Maybe<Array<Maybe<Person>>>;\n  personsAggregate?: Maybe<PersonAggregateResult>;\n  storyID: Scalars['String'];\n  title?: Maybe<Scalars['String']>;\n};\n\n\nexport type StoryPersonsArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\n\nexport type StoryPersonsAggregateArgs = {\n  filter?: Maybe<PersonFilter>;\n};\n\nexport type StoryAggregateResult = {\n  __typename?: 'StoryAggregateResult';\n  count?: Maybe<Scalars['Int']>;\n  storyIDMax?: Maybe<Scalars['String']>;\n  storyIDMin?: Maybe<Scalars['String']>;\n  titleMax?: Maybe<Scalars['String']>;\n  titleMin?: Maybe<Scalars['String']>;\n};\n\nexport type StoryFilter = {\n  and?: Maybe<Array<Maybe<StoryFilter>>>;\n  has?: Maybe<StoryHasFilter>;\n  not?: Maybe<StoryFilter>;\n  or?: Maybe<Array<Maybe<StoryFilter>>>;\n  storyID?: Maybe<StringHashFilter>;\n  title?: Maybe<StringTermFilter>;\n};\n\nexport enum StoryHasFilter {\n  Persons = 'persons',\n  StoryId = 'storyID',\n  Title = 'title'\n}\n\nexport type StoryOrder = {\n  asc?: Maybe<StoryOrderable>;\n  desc?: Maybe<StoryOrderable>;\n  then?: Maybe<StoryOrder>;\n};\n\nexport enum StoryOrderable {\n  StoryId = 'storyID',\n  Title = 'title'\n}\n\nexport type StoryPatch = {\n  persons?: Maybe<Array<Maybe<PersonRef>>>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type StoryRef = {\n  persons?: Maybe<Array<Maybe<PersonRef>>>;\n  storyID?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type StringExactFilter = {\n  between?: Maybe<StringRange>;\n  eq?: Maybe<Scalars['String']>;\n  ge?: Maybe<Scalars['String']>;\n  gt?: Maybe<Scalars['String']>;\n  in?: Maybe<Array<Maybe<Scalars['String']>>>;\n  le?: Maybe<Scalars['String']>;\n  lt?: Maybe<Scalars['String']>;\n};\n\nexport type StringFullTextFilter = {\n  alloftext?: Maybe<Scalars['String']>;\n  anyoftext?: Maybe<Scalars['String']>;\n};\n\nexport type StringHashFilter = {\n  eq?: Maybe<Scalars['String']>;\n  in?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type StringRange = {\n  max: Scalars['String'];\n  min: Scalars['String'];\n};\n\nexport type StringRegExpFilter = {\n  regexp?: Maybe<Scalars['String']>;\n};\n\nexport type StringTermFilter = {\n  allofterms?: Maybe<Scalars['String']>;\n  anyofterms?: Maybe<Scalars['String']>;\n};\n\nexport type UpdatePersonInput = {\n  filter: PersonFilter;\n  remove?: Maybe<PersonPatch>;\n  set?: Maybe<PersonPatch>;\n};\n\nexport type UpdatePersonPayload = {\n  __typename?: 'UpdatePersonPayload';\n  numUids?: Maybe<Scalars['Int']>;\n  person?: Maybe<Array<Maybe<Person>>>;\n};\n\n\nexport type UpdatePersonPayloadPersonArgs = {\n  filter?: Maybe<PersonFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<PersonOrder>;\n};\n\nexport type UpdateStoryInput = {\n  filter: StoryFilter;\n  remove?: Maybe<StoryPatch>;\n  set?: Maybe<StoryPatch>;\n};\n\nexport type UpdateStoryPayload = {\n  __typename?: 'UpdateStoryPayload';\n  numUids?: Maybe<Scalars['Int']>;\n  story?: Maybe<Array<Maybe<Story>>>;\n};\n\n\nexport type UpdateStoryPayloadStoryArgs = {\n  filter?: Maybe<StoryFilter>;\n  first?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<StoryOrder>;\n};\n\nexport type WithinFilter = {\n  polygon: PolygonRef;\n};\n\nexport type GetAllPersonsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllPersonsQuery = (\n  { __typename?: 'Query' }\n  & { queryPerson?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonWithLinksFieldsFragment\n  )>>> }\n);\n\nexport type GetPersonByNameQueryVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type GetPersonByNameQuery = (\n  { __typename?: 'Query' }\n  & { queryPerson?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonWithLinksFieldsFragment\n  )>>> }\n);\n\nexport type GetPersonByUidQueryVariables = Exact<{\n  uid: Scalars['String'];\n}>;\n\n\nexport type GetPersonByUidQuery = (\n  { __typename?: 'Query' }\n  & { getPerson?: Maybe<(\n    { __typename?: 'Person' }\n    & PersonWithLinksFieldsFragment\n  )> }\n);\n\nexport type GetPersonDetailsByUidQueryVariables = Exact<{\n  uid: Scalars['String'];\n}>;\n\n\nexport type GetPersonDetailsByUidQuery = (\n  { __typename?: 'Query' }\n  & { getPerson?: Maybe<(\n    { __typename?: 'Person' }\n    & Pick<Person, 'dateOfDeath'>\n    & { story?: Maybe<(\n      { __typename?: 'Story' }\n      & Pick<Story, 'title'>\n    )> }\n    & PersonFieldsFragment\n  )> }\n);\n\nexport type GetStartNodesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetStartNodesQuery = (\n  { __typename?: 'Query' }\n  & { queryPerson?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & { story?: Maybe<(\n      { __typename?: 'Story' }\n      & Pick<Story, 'title'>\n    )>, children?: Maybe<Array<Maybe<(\n      { __typename?: 'Person' }\n      & PersonFieldsFragment\n    )>>>, parents?: Maybe<Array<Maybe<(\n      { __typename?: 'Person' }\n      & PersonFieldsFragment\n    )>>>, nonBioChildren?: Maybe<Array<Maybe<(\n      { __typename?: 'Person' }\n      & PersonFieldsFragment\n    )>>> }\n    & PersonFieldsFragment\n  )>>> }\n);\n\nexport type GetStoryByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetStoryByIdQuery = (\n  { __typename?: 'Query' }\n  & { getStory?: Maybe<(\n    { __typename?: 'Story' }\n    & Pick<Story, 'storyID' | 'title'>\n    & { persons?: Maybe<Array<Maybe<(\n      { __typename?: 'Person' }\n      & PersonWithLinksFieldsFragment\n    )>>> }\n  )> }\n);\n\nexport type PersonWithLinksFieldsFragment = (\n  { __typename?: 'Person' }\n  & { story?: Maybe<(\n    { __typename?: 'Story' }\n    & Pick<Story, 'title'>\n  )>, children?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, parents?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, nonBioChildren?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, nonBioParents?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, physicalRelation?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>>, otherRelation?: Maybe<Array<Maybe<(\n    { __typename?: 'Person' }\n    & PersonFieldsFragment\n  )>>> }\n  & PersonFieldsFragment\n);\n\nexport type PersonFieldsFragment = (\n  { __typename?: 'Person' }\n  & Pick<Person, 'personID' | 'name' | 'dateOfBirth' | 'dateOfDeath' | 'nickNames' | 'gender' | 'cx' | 'cy'>\n);\n\nexport const PersonFieldsFragmentDoc = gql`\n    fragment PersonFields on Person {\n  personID\n  name\n  dateOfBirth\n  dateOfDeath\n  nickNames\n  gender\n  cx\n  cy\n}\n    `;\nexport const PersonWithLinksFieldsFragmentDoc = gql`\n    fragment PersonWithLinksFields on Person {\n  ...PersonFields\n  story {\n    title\n  }\n  children {\n    ...PersonFields\n  }\n  parents {\n    ...PersonFields\n  }\n  nonBioChildren {\n    ...PersonFields\n  }\n  nonBioParents {\n    ...PersonFields\n  }\n  physicalRelation {\n    ...PersonFields\n  }\n  otherRelation {\n    ...PersonFields\n  }\n}\n    ${PersonFieldsFragmentDoc}`;\nexport const GetAllPersonsDocument = gql`\n    query getAllPersons {\n  queryPerson {\n    ...PersonWithLinksFields\n  }\n}\n    ${PersonWithLinksFieldsFragmentDoc}`;\nexport const GetPersonByNameDocument = gql`\n    query getPersonByName($name: String!) {\n  queryPerson(filter: {name: {allofterms: $name}}) {\n    ...PersonWithLinksFields\n  }\n}\n    ${PersonWithLinksFieldsFragmentDoc}`;\nexport const GetPersonByUidDocument = gql`\n    query getPersonByUid($uid: String!) {\n  getPerson(personID: $uid) {\n    ...PersonWithLinksFields\n  }\n}\n    ${PersonWithLinksFieldsFragmentDoc}`;\nexport const GetPersonDetailsByUidDocument = gql`\n    query getPersonDetailsByUid($uid: String!) {\n  getPerson(personID: $uid) {\n    ...PersonFields\n    dateOfDeath\n    story {\n      title\n    }\n  }\n}\n    ${PersonFieldsFragmentDoc}`;\nexport const GetStartNodesDocument = gql`\n    query getStartNodes {\n  queryPerson(filter: {name: {allofterms: \"Pa Salt\"}}) {\n    ...PersonFields\n    story {\n      title\n    }\n    children {\n      ...PersonFields\n    }\n    parents {\n      ...PersonFields\n    }\n    nonBioChildren {\n      ...PersonFields\n    }\n  }\n}\n    ${PersonFieldsFragmentDoc}`;\nexport const GetStoryByIdDocument = gql`\n    query getStoryById($id: String!) {\n  getStory(storyID: $id) {\n    storyID\n    title\n    persons {\n      ...PersonWithLinksFields\n    }\n  }\n}\n    ${PersonWithLinksFieldsFragmentDoc}`;\n\nexport type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = sdkFunction => sdkFunction();\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getAllPersons(variables?: GetAllPersonsQueryVariables): Promise<GetAllPersonsQuery> {\n      return withWrapper(() => client.request<GetAllPersonsQuery>(print(GetAllPersonsDocument), variables));\n    },\n    getPersonByName(variables: GetPersonByNameQueryVariables): Promise<GetPersonByNameQuery> {\n      return withWrapper(() => client.request<GetPersonByNameQuery>(print(GetPersonByNameDocument), variables));\n    },\n    getPersonByUid(variables: GetPersonByUidQueryVariables): Promise<GetPersonByUidQuery> {\n      return withWrapper(() => client.request<GetPersonByUidQuery>(print(GetPersonByUidDocument), variables));\n    },\n    getPersonDetailsByUid(variables: GetPersonDetailsByUidQueryVariables): Promise<GetPersonDetailsByUidQuery> {\n      return withWrapper(() => client.request<GetPersonDetailsByUidQuery>(print(GetPersonDetailsByUidDocument), variables));\n    },\n    getStartNodes(variables?: GetStartNodesQueryVariables): Promise<GetStartNodesQuery> {\n      return withWrapper(() => client.request<GetStartNodesQuery>(print(GetStartNodesDocument), variables));\n    },\n    getStoryById(variables: GetStoryByIdQueryVariables): Promise<GetStoryByIdQuery> {\n      return withWrapper(() => client.request<GetStoryByIdQuery>(print(GetStoryByIdDocument), variables));\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import React from \"react\";\nimport GraphiQL from \"graphiql\";\nimport { FetcherParams } from \"graphiql/dist/components/GraphiQL\";\n\nconst graphQLFetcher = async (graphQLParams: FetcherParams) => {\n  return (\n    await fetch(\"http://localhost:8080/graphql\", {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      // mode: \"cors\",\n      // credentials: \"omit\",\n      body: JSON.stringify(graphQLParams),\n    })\n  ).json();\n};\n\nconst GraphDebugger = () => {\n  return (\n    <>\n      <GraphiQL fetcher={graphQLFetcher} />\n      <p>test query:</p>\n      <pre>\n        {`// Get any person\n{\n  queryPerson {\n    __typename\n    personID\n    name\n  }\n}\n\n// Get any story\n{\n  queryStory {\n    __typename\n    title\n  }\n}\n\n// Get any person with related stories and persons\nquery getAllPersons {\n  queryPerson {\n    __typename\n    personID\n    name\n    nickNames\n    story {\n      title\n    }\n    parent {\n      __typename\n      name\n      personID\n    }\n  }\n}\n\n// Get a specific person by name and related persons sorted by name\nquery getPersonByName($name: String!) {\n  queryPerson(filter: { name: {allofterms: $name}}) {\n    __typename\n    personID\n    name\n    nonBioParent(order: { asc: name }, first: 15) {\n      name\n    }\n    parent(order: { asc: name }, first: 15) {\n      name\n    }\n  }\n}\n+\n{\n  \"name\": \"Pa\"\n}\n\n// TODO Get persons by related story title\n// See https://discuss.dgraph.io/t/filtering-by-relation/5757/2\n{\n  queryPersonWithStory(func: has(Person.story)) {\n    Person.uid\n    Person.name\n    Person.story @filter(eq(Story.title, \"The Storm Sister\")) {\n      Story.title \n    }\n  }\n}\n\n# Get story by title and all persons in it\nquery getStoryByTitle($title: String!) {\n  queryStory(filter: { title: {allofterms: $title}}) {\n    storyID\n    title\n    persons {\n      name\n    }\n  }\n}\n+\n{\n  \"title\": \"Storm\"\n}\n\n# Gets all persons and than filters stories, so non matching persons will still show up, but with story: null\nquery getPersonsByStoryTitle($title: String!) {\n  queryPerson(filter: { has:story}) {\n    __typename\n    personID\n    name\n    story(filter: { title: {allofterms: $title} }) {\n      title\n    }\n  }\n}\n+\n{\n  \"title\": \"Storm\"\n}\n\n# Test query inverse relation\n{\n  queryPerson {\n    __typename\n    personID\n    name\n    children {\n      name\n    }\n    parents {\n      name\n    }\n    nonBioChildren {\n      name\n    }\n    nonBioParents {\n      name\n    }\n  }\n}\n\n# DQL automatic recurse\n{\n  node(func: anyofterms(Person.name, \"Maia\")) @recurse(depth: 3) {\n    uid\n    expand(_all_) {\n      \n    }\n  }\n}\n`}\n      </pre>\n    </>\n  );\n};\n\nexport default GraphDebugger;\n","import { GraphConfiguration, GraphLink, GraphNode } from \"react-d3-graph\";\n\nexport interface CustomNode extends GraphNode {\n  name: string;\n  x?: number,\n  y?: number,\n  dateOfBirth?: string,\n  dateOfDeath?: string,\n}\n\n// the graph configuration, just override the ones you need\nconst appGraphConfig = (width: number, height: number): GraphConfiguration<CustomNode, GraphLink> => ({\n  automaticRearrangeAfterDropNode: false,\n  collapsible: false,\n  directed: true,\n  focusAnimationDuration: 0.5,\n  focusZoom: 1,\n  //   freezeAllDragEvents: false,\n  height,\n  highlightDegree: 2,\n  highlightOpacity: 0.2,\n  linkHighlightBehavior: false,\n  maxZoom: 12,\n  minZoom: 0.05,\n  nodeHighlightBehavior: true,\n  panAndZoom: false,\n  staticGraph: false,\n  staticGraphWithDragAndDrop: true,\n  width,\n  d3: {\n    alphaTarget: 0.05,\n    gravity: -50,\n    linkLength: 120,\n    linkStrength: 2,\n    disableLinkForce: true,\n  },\n  node: {\n    color: \"#d3d3d3\",\n    fontColor: \"black\",\n    fontSize: 10,\n    fontWeight: \"normal\",\n    highlightColor: \"red\",\n    highlightFontSize: 14,\n    highlightFontWeight: \"bold\",\n    highlightStrokeColor: \"red\",\n    highlightStrokeWidth: 1.5,\n    mouseCursor: \"crosshair\",\n    opacity: 0.9,\n    renderLabel: true,\n    size: 200,\n    strokeColor: \"none\",\n    strokeWidth: 1.5,\n    svg: \"\",\n    symbolType: \"circle\",\n    labelProperty: (n: { name: string }) => n.name,\n  },\n  link: {\n    color: \"lightgray\",\n    fontColor: \"black\",\n    fontSize: 8,\n    fontWeight: \"normal\",\n    highlightColor: \"red\",\n    highlightFontSize: 8,\n    highlightFontWeight: \"normal\",\n    // labelProperty: (x) => x.source,\n    mouseCursor: \"pointer\",\n    opacity: 1,\n    renderLabel: true,\n    semanticStrokeWidth: true,\n    strokeWidth: 3,\n    markerHeight: 6,\n    markerWidth: 6,\n    // strokeDasharray: 0,\n    // strokeDashoffset: 0,\n    // strokeLinecap: \"butt\",\n  },\n});\n\nexport default appGraphConfig;\n","import { Maybe } from \"graphql/jsutils/Maybe\";\nimport { GraphLink } from \"react-d3-graph\";\nimport {\n  // Maybe,\n  PersonFieldsFragment,\n  PersonWithLinksFieldsFragment,\n} from \"../../generated/graphql\";\nimport { CustomNode } from \"./appGraphConfig\";\n\nconst genderColor = (gender?: Maybe<string>): string | undefined => {\n  if (gender === \"male\") {\n    return \"#357ae8\";\n  }\n  if (gender === \"female\") {\n    return \"#f50057\";\n  }\n  return;\n};\n\nconst convertPersonToNode = (originNode?: CustomNode) => ({\n  personID,\n  name,\n  gender,\n  cx,\n  cy,\n  dateOfBirth,\n  dateOfDeath,\n}: PersonWithLinksFieldsFragment): CustomNode => {\n  const node = {\n    id: personID || \"INVALID_PERSON_ID\",\n    name: name || \"INVALID_PERSON_NAME\",\n    color: genderColor(gender),\n    dateOfBirth: dateOfBirth || undefined,\n    dateOfDeath: dateOfDeath || undefined,\n  };\n  if (cx && cy) {\n    return {\n      ...node,\n      x: cx,\n      y: cy,\n    };\n  }\n  if (originNode && originNode.x && originNode.y) {\n    return {\n      ...node,\n      // TODO this can be improved by replacing random with radial, but it needs the total list of nodes that will be added\n      x: originNode.x + ((Math.random() - 0.5) * 200),\n      y: originNode.y + ((Math.random() - 0.5) * 200),\n    };\n  }\n  return node;\n};\n\nexport function isJustVal<T>(val: Maybe<T>): val is T {\n  return Boolean(val);\n}\n\nconst relationTypeColor = (type: string): string | undefined => {\n  if (type === \"children\" || type === \"parents\") {\n    return \"#141823\";\n  }\n  if (type === \"nonBioChildren\" || type === \"nonBioParents\") {\n    return \"#3f51b5\";\n  }\n  if (type === \"physicalRelation\") {\n    return \"#f50057\";\n  }\n};\n\nconst convertRelatedPersonToEdge = (type: string, personID: string) => (\n  person: PersonFieldsFragment | null\n): GraphLink => {\n  const otherPersonID = person?.personID ?? \"INVALID_PERSON_ID\";\n  const isInverted = type === \"parents\" || type === \"nonBioParents\";\n  const source = isInverted ? otherPersonID : personID;\n  const target = isInverted ? personID : otherPersonID;\n  return {\n    source,\n    target,\n    color: relationTypeColor(type),\n  };\n};\n\nexport const convertPersonsToGraphData = (\n  persons: PersonWithLinksFieldsFragment[],\n  originNode?: CustomNode\n): [CustomNode[], GraphLink[]] => {\n  const justPersons = persons?.filter(isJustVal) ?? [];\n\n  const nodes = justPersons.map<CustomNode>(convertPersonToNode(originNode));\n\n  // TODO should this not for tail too?\n  const relatedNodes = convertRelatedToNodes(justPersons[0], originNode);\n  const allNodes = nodes.concat(relatedNodes);\n\n  const links = justPersons.flatMap(\n    ({\n      personID,\n      children,\n      parents,\n      nonBioChildren,\n      nonBioParents,\n      physicalRelation,\n      otherRelation,\n    }) => {\n      const allRelations = {\n        children,\n        parents,\n        nonBioChildren,\n        nonBioParents,\n        physicalRelation,\n        otherRelation,\n      };\n      const edgesForAllRelations: GraphLink[] = Object.entries(\n        allRelations\n      ).flatMap(([relationType, relatedPersons]) => {\n        return relatedPersons\n          ? relatedPersons.map(\n              convertRelatedPersonToEdge(relationType, personID)\n            )\n          : [];\n      });\n      return edgesForAllRelations;\n    }\n  );\n\n  // TODO when \"Zed\" is added (e.g. by clicking \"Maia\"), the edge to \"Electra\" should be added directly.\n  const linksToExistingNodes = links.filter(\n    (link) =>\n      allNodes.some((n) => n.id === link.source) &&\n      allNodes.some((n) => n.id === link.target)\n  );\n\n  return [allNodes, linksToExistingNodes];\n};\n\nconst convertRelatedToNodes = (\n  {\n    children,\n    parents,\n    nonBioChildren,\n    nonBioParents,\n    physicalRelation,\n    otherRelation,\n  }: PersonWithLinksFieldsFragment,\n  originNode?: CustomNode\n): CustomNode[] => {\n  const allRelations = {\n    children,\n    parents,\n    nonBioChildren,\n    nonBioParents,\n    physicalRelation,\n    otherRelation,\n  };\n  const allRelatedPersons = Object.entries(allRelations)\n    .flatMap(([relationType, relatedPersons]) => relatedPersons)\n    .filter(isJustVal);\n  return allRelatedPersons.map<CustomNode>(convertPersonToNode(originNode));\n};\n","export const SET_BOOK_FILTER = \"SET_BOOK_FILTER\";\nexport const SET_DETAILS_FOR = \"SET_DETAILS_FOR\";\nexport const SET_TIME_RANGE = \"SET_TIME_RANGE\";\nexport const SET_LITE_MODE = \"SET_LITE_MODE\";\n","import { CustomNode } from \"../components/GraphQuery/appGraphConfig\";\nimport {\n  SET_BOOK_FILTER,\n  SET_DETAILS_FOR,\n  SET_LITE_MODE,\n  SET_TIME_RANGE,\n} from \"./actions\";\n\nexport interface GraphSettingsState {\n  isLiteMode: boolean;\n  searchByBook: string;\n  detailsFor: [string, CustomNode | undefined];\n  timeRange: [number, number];\n}\n\nexport const TIME_RANGE_MIN = 1800;\nexport const TIME_RANGE_MAX = 2008;\n\nexport const initialState: GraphSettingsState = {\n  isLiteMode: false,\n  searchByBook: \"\",\n  detailsFor: [\"\", undefined],\n  timeRange: [TIME_RANGE_MIN, TIME_RANGE_MAX],\n};\n\ntype Action =\n  | { type: typeof SET_BOOK_FILTER; payload: string }\n  | { type: typeof SET_DETAILS_FOR; payload: [string, CustomNode | undefined] }\n  | { type: typeof SET_TIME_RANGE; payload: [number, number] }\n  | { type: typeof SET_LITE_MODE; payload: boolean };\n\nexport type ContextType = {\n  state: GraphSettingsState;\n  dispatch: React.Dispatch<Action>;\n};\n\nexport const reducer = (\n  state: GraphSettingsState,\n  action: Action\n): GraphSettingsState => {\n  switch (action.type) {\n    case SET_BOOK_FILTER:\n      return { ...state, searchByBook: action.payload };\n    case SET_DETAILS_FOR:\n      return { ...state, detailsFor: action.payload };\n    case SET_TIME_RANGE:\n      return { ...state, timeRange: action.payload };\n    case SET_LITE_MODE:\n      return { ...state, isLiteMode: action.payload };\n    default:\n      throw new Error(`Unknown action type: ${action}`);\n  }\n};\n","import { createContext, FC, useContext, useReducer } from \"react\";\nimport { GraphSettingsState, initialState, reducer } from \"./reducer\";\n\nconst GraphSettingsContext = createContext<{\n  state: GraphSettingsState;\n  dispatch: React.Dispatch<any>;\n}>({\n  state: initialState,\n  dispatch: () => null,\n});\n\nexport const GraphSettingsProvider: FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <GraphSettingsContext.Provider value={{ state, dispatch }}>\n      {children}\n    </GraphSettingsContext.Provider>\n  );\n};\n\nexport const useGraphSettingsContext = () => useContext(GraphSettingsContext);\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    width: `calc(100% - ${theme.spacing(4)}px)`,\n    margin: `${theme.spacing(1)}px ${theme.spacing(2)}px`,\n    transition: \"height 200ms\"\n  },\n  closed: {\n    overflow: \"hidden\",\n    height: theme.spacing(2),\n    width: theme.spacing(2),\n    transition: \"height 200ms\"\n  },\n  gridRoot: {\n    flexGrow: 1,\n  },\n  cardRoot: {\n    backgroundColor: \"rgba(255,255,255,0.5)\",\n  },\n  cardContentRoot: {\n    \"&:last-child\": {\n      paddingBottom: theme.spacing(1),\n    },\n  },\n  formControlRoot: {\n    width: \"100%\",\n  },\n  collapseButton: {\n    position: \"absolute\",\n    left: theme.spacing(-2),\n    top: theme.spacing(-2),\n  },\n}));\n\nexport default useStyles;\n","import {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectProps,\n  Tooltip,\n  Typography,\n  Link,\n} from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport { useGraphSettingsContext } from \"../../context/GraphSettingsContext\";\nimport { GraphSettingsState } from \"../../context/reducer\";\nimport useStyles from \"./GraphTools.styles\";\n\ninterface Props {\n  searchByBook: GraphSettingsState[\"searchByBook\"];\n  onChange: SelectProps[\"onChange\"];\n}\n\nconst BookSelector: FC<Props> = ({ searchByBook, onChange }) => {\n  const {\n    state: { isLiteMode },\n  } = useGraphSettingsContext();\n  const classes = useStyles();\n  const warning = (\n    <Tooltip\n      title=\"This feature is disabled because the application is running in Lite Mode.\n  For more information, click to see the documentation on Github.\"\n    >\n      <Link href=\"https://github.com/mdvanes/7sgraph#lite-mode\">\n        <Typography variant=\"h4\">Lite Mode</Typography>\n      </Link>\n    </Tooltip>\n  );\n  const formControl = (\n    <FormControl variant=\"outlined\" classes={{ root: classes.formControlRoot }}>\n      <InputLabel id=\"demo-simple-select-outlined-label\">\n        Search by book\n      </InputLabel>\n      {/* This can be improved by retrieving books with a query */}\n      <Select\n        labelId=\"demo-simple-select-outlined-label\"\n        id=\"demo-simple-select-outlined\"\n        value={searchByBook}\n        onChange={onChange}\n        label=\"Search by book\"\n      >\n        <MenuItem value=\"\">\n          <em>None</em>\n        </MenuItem>\n        <MenuItem value=\"book1\">The Seven Sisters</MenuItem>\n        <MenuItem value=\"book2\">The Storm Sister</MenuItem>\n        <MenuItem value=\"book3\">The Shadow Sister</MenuItem>\n        <MenuItem value=\"book4\">The Pearl Sister</MenuItem>\n        <MenuItem value=\"book5\">The Moon Sister</MenuItem>\n        <MenuItem value=\"book6\">The Sun Sister</MenuItem>\n        <MenuItem value=\"all\">All</MenuItem>\n      </Select>\n    </FormControl>\n  );\n  return isLiteMode ? warning : formControl;\n};\n\nexport default BookSelector;\n","import React from \"react\";\nimport { Slider, Typography } from \"@material-ui/core\";\nimport { SET_TIME_RANGE } from \"../../context/actions\";\nimport { useGraphSettingsContext } from \"../../context/GraphSettingsContext\";\nimport { TIME_RANGE_MAX, TIME_RANGE_MIN } from \"../../context/reducer\";\n\n// const valuetext = (value: number) => `${value}`;\n\nconst TimeRangeSlider = () => {\n    const {\n        dispatch,\n        state: {  timeRange },\n      } = useGraphSettingsContext();\n    return (\n    <>\n      <Typography id=\"range-slider\" gutterBottom style={{paddingLeft: \"25px\"}}>\n        Time range\n      </Typography>\n      <Slider\n        value={timeRange}\n        onChange={(event, newValue: number | number[]) => {\n          dispatch({\n            type: SET_TIME_RANGE,\n            payload: newValue as number[],\n          });\n        }}\n        valueLabelDisplay=\"on\"\n        aria-labelledby=\"range-slider\"\n        // getAriaValueText={valuetext}\n        min={TIME_RANGE_MIN}\n        max={TIME_RANGE_MAX}\n      />\n    </>\n  );\n};\n\nexport default TimeRangeSlider;\n","import { Card, CardContent, Grid, IconButton } from \"@material-ui/core\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport { SET_BOOK_FILTER } from \"../../context/actions\";\nimport { useGraphSettingsContext } from \"../../context/GraphSettingsContext\";\nimport BookSelector from \"./BookSelector\";\nimport useStyles from \"./GraphTools.styles\";\nimport TimeRangeSlider from \"./TimeRangeSlider\";\n\nconst GraphTools = () => {\n  const classes = useStyles();\n  const [isOpen, setIsOpen] = useState(true);\n\n  const {\n    dispatch,\n    state: { searchByBook },\n  } = useGraphSettingsContext();\n\n  const rootClass = isOpen ? classes.root : `${classes.root} ${classes.closed}`;\n\n  return (\n    <div className={rootClass}>\n      <Card classes={{ root: classes.cardRoot }}>\n        <CardContent classes={{ root: classes.cardContentRoot }}>\n          <Grid container spacing={4} classes={{ root: classes.gridRoot }}>\n            <Grid item xs={12} sm={4} md={2}>\n              <BookSelector\n                searchByBook={searchByBook}\n                onChange={(event) => {\n                  dispatch({\n                    type: SET_BOOK_FILTER,\n                    payload: event.target.value,\n                  });\n                }}\n              />\n            </Grid>\n            <Grid item xs md={4}>\n              <TimeRangeSlider />\n            </Grid>\n          </Grid>\n\n          <IconButton\n            aria-label=\"collapse\"\n            onClick={() => {\n              setIsOpen(!isOpen);\n            }}\n            className={classes.collapseButton}\n          >\n            {isOpen ? <ExpandLess /> : <ExpandMore />}\n          </IconButton>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default GraphTools;\n","import { GraphQLClient } from \"graphql-request\";\n\nconst client = new GraphQLClient(process.env[\"REACT_APP_GRAPHQL_URL\"] || \"\", {\n  headers: {},\n});\n\nexport default client;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n      position: \"absolute\",\n      bottom: spacing(2),\n      right: spacing(2),\n  },\n  cardRoot: {\n    backgroundColor: \"rgba(255,255,255,0.5)\",\n    height: 310,\n    width: 270,\n  },\n}));\n\nexport default useStyles;\n","import React, { FC } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport { Close as CloseIcon } from \"@material-ui/icons\";\nimport { PersonWithLinksFieldsFragment } from \"../../generated/graphql\";\nimport useStyles from \"./GraphDetails.styles\";\n\ninterface CardProps {\n  title: string;\n  uid: string;\n  nickNames?: PersonWithLinksFieldsFragment[\"nickNames\"];\n  story?: PersonWithLinksFieldsFragment[\"story\"];\n  dateOfBirth: PersonWithLinksFieldsFragment[\"dateOfBirth\"];\n  dateOfDeath: PersonWithLinksFieldsFragment[\"dateOfDeath\"];\n  isFallback: boolean;\n  close: () => void;\n}\n\nconst getDodValue = (dod?: string | null) => {\n  if (dod && dod === \"1\") {\n    return \"dead\";\n  }\n  if (dod) {\n    return dod;\n  }\n  return \"alive\";\n};\n\nconst GraphDetailsCard: FC<CardProps> = ({\n  title,\n  uid,\n  nickNames,\n  story,\n  dateOfBirth,\n  dateOfDeath,\n  isFallback,\n  close,\n}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Card classes={{ root: classes.cardRoot }}>\n        <CardHeader\n          title={title}\n          action={\n            <IconButton onClick={close}>\n              <CloseIcon />\n            </IconButton>\n          }\n        />\n        <CardContent>\n          {nickNames && nickNames.length > 0 && (\n            <Typography variant=\"body1\">\n              Nicknames: <em>{nickNames?.join(\", \")}</em>\n            </Typography>\n          )}\n          <Typography variant=\"body1\">\n            Main book:{\" \"}\n            {isFallback ? (\n              \"not available in Lite Mode\"\n            ) : (\n              <em>{story?.title}</em>\n            )}\n          </Typography>\n          <Typography variant=\"body1\">\n            {dateOfBirth && (\n              <>\n                🚼 <em>{dateOfBirth}</em>\n              </>\n            )}\n          </Typography>\n          <Typography variant=\"body1\">\n            ✝️ <em>{getDodValue(dateOfDeath)}</em>\n          </Typography>\n          <Typography variant=\"body2\" align=\"center\">\n            <em>&lt;{uid}&gt;</em>\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default GraphDetailsCard;\n","import React, { FC, useCallback, useEffect, useState } from \"react\";\nimport { useGraphSettingsContext } from \"../../context/GraphSettingsContext\";\nimport { GetPersonDetailsByUidQuery, getSdk } from \"../../generated/graphql\";\nimport client from \"../GraphQuery/graphClient\";\nimport GraphDetailsCard from \"./GraphDetailsCard\";\n\nconst getGenderIcon = (gender?: string | null) => {\n  if (gender === \"male\") {\n    return \"♂️\";\n  } else if (gender === \"female\") {\n    return \"♀️\";\n  }\n  return \"\";\n};\n\nconst GraphDetails: FC = () => {\n  const {\n    state: { detailsFor },\n  } = useGraphSettingsContext();\n  const [uid, fallback] = detailsFor;\n\n  const [person, setPerson] = useState<\n    GetPersonDetailsByUidQuery[\"getPerson\"] | null\n  >(null);\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const memoizedInitialize = useCallback(async () => {\n    try {\n      const { getPersonDetailsByUid } = getSdk(client);\n      const { getPerson } = await getPersonDetailsByUid({ uid });\n      if (getPerson) {\n        setPerson(getPerson);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    setIsOpen(true);\n  }, [uid]);\n\n  useEffect(() => {\n    memoizedInitialize();\n  }, [memoizedInitialize]);\n\n  const closeCard = () => {\n    setIsOpen(false);\n  };\n\n  if(!isOpen) {\n    return <></>\n  }\n\n  if (person) {\n    const title = person\n      ? `${person.name} ${getGenderIcon(person.gender)}`\n      : \"\";\n\n    return (\n      <GraphDetailsCard\n        title={title}\n        uid={uid}\n        nickNames={person.nickNames}\n        story={person.story}\n        dateOfBirth={person.dateOfBirth}\n        dateOfDeath={person.dateOfDeath}\n        isFallback={false}\n        close={closeCard}\n      />\n    );\n  }\n\n  if (!person && fallback) {\n    return (\n      <GraphDetailsCard\n        title={fallback.name}\n        uid={uid}\n        dateOfBirth={fallback?.dateOfBirth}\n        dateOfDeath={fallback?.dateOfDeath}\n        isFallback\n        close={closeCard}\n      />\n    );\n  }\n\n  return <></>;\n};\n\nexport default GraphDetails;\n","const isDateRange = (date: string): boolean => date.indexOf(\"BET\") === 0;\n\nconst parseDateRange = (dateRange: string): [number, number] => {\n  const [, fromStr, , toStr] = dateRange.split(\" \");\n  return [parseInt(fromStr, 10), parseInt(toStr, 10)];\n};\n\nexport const getIsBornBeforeEnd = (endDate: number, dateOfBirth?: string) => {\n  if (!dateOfBirth) {\n    return true;\n  }\n  if (!isDateRange(dateOfBirth)) {\n    return parseInt(dateOfBirth, 10) <= endDate;\n  }\n  const [minDate] = parseDateRange(dateOfBirth);\n  return minDate <= endDate;\n};\n\nexport const getIsAliveAfterStart = (startDate: number, dateOfDeath?: string) => {\n  if (!dateOfDeath || dateOfDeath === \"1\") {\n    return true;\n  }\n  if (!isDateRange(dateOfDeath)) {\n    return parseInt(dateOfDeath, 10) >= startDate;\n  }\n  const [,maxDate] = parseDateRange(dateOfDeath);\n  return maxDate >= startDate;\n};","import { GraphLink } from \"react-d3-graph\";\nimport { SET_LITE_MODE } from \"../../context/actions\";\nimport { getSdk, PersonWithLinksFieldsFragment } from \"../../generated/graphql\";\nimport client from \"./graphClient\";\n\nexport const filterUniqueLinks = (links: GraphLink[]): GraphLink[] => {\n  const compoundIdsToLinks: [string, GraphLink][] = links.map((l) => [\n    `${l.source},${l.target}`,\n    l,\n  ]);\n  const uniqueByCompoundId = Object.values(\n    Object.fromEntries(compoundIdsToLinks)\n  );\n  return uniqueByCompoundId;\n};\n\nexport const getMaybePersons = async (searchByBook: string, dispatch: React.Dispatch<any>) => {\n  const { getStartNodes, getStoryById, getAllPersons } = getSdk(client);\n  try {\n    if (searchByBook && searchByBook === \"all\") {\n      const { queryPerson } = await getAllPersons();\n      return queryPerson;\n    } else if (searchByBook) {\n      const { getStory } = await getStoryById({ id: searchByBook });\n      return getStory?.persons;\n    } else {\n      const { queryPerson } = await getStartNodes();\n      return queryPerson;\n    }  \n  } catch (err) {\n    console.error(\"DGraph server not available, falling back to Lite Mode: \" + err);\n    const allJson = await (await fetch(\"/7sgraph/all.json\")).json();\n    dispatch({\n      type: SET_LITE_MODE,\n      payload: true,\n    });\n    return allJson.data.queryPerson as PersonWithLinksFieldsFragment[];\n  }\n};\n","import React from \"react\";\nimport { Graph, GraphData, GraphLink } from \"react-d3-graph\";\nimport { getSdk } from \"../../generated/graphql\";\nimport appGraphConfig, { CustomNode } from \"./appGraphConfig\";\nimport { FC, useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  convertPersonsToGraphData,\n  isJustVal,\n} from \"./convertPersonsToGraphData\";\nimport GraphTools from \"../GraphTools/GraphTools\";\nimport { useGraphSettingsContext } from \"../../context/GraphSettingsContext\";\nimport GraphDetails from \"../GraphDetails/GraphDetails\";\nimport { SET_DETAILS_FOR } from \"../../context/actions\";\nimport client from \"./graphClient\";\nimport { getIsAliveAfterStart, getIsBornBeforeEnd } from \"./parseDate\";\nimport { filterUniqueLinks, getMaybePersons } from \"./graphQueryUtils\";\nimport { useMediaQuery } from \"@material-ui/core\";\n\nconst GraphQuery: FC = () => {\n  const {\n    dispatch,\n    state: { searchByBook, timeRange },\n  } = useGraphSettingsContext();\n  const isSmall = useMediaQuery(\"(max-width:600px)\");\n  const [graphData, setGraphData] = useState<GraphData<CustomNode, GraphLink>>({\n    nodes: [],\n    links: [],\n  });\n\n  const [filteredGraphData, setFilteredGraphData] = useState<\n    GraphData<CustomNode, GraphLink>\n  >({\n    nodes: [],\n    links: [],\n  });\n\n  const { getPersonByUid } = getSdk(client);\n  const graphRef = useRef(null);\n\n  const memoizedInitialize = useCallback(async () => {\n    try {\n      const maybePersons = await getMaybePersons(searchByBook, dispatch);\n      const justPersons = maybePersons?.filter(isJustVal) ?? [];\n      const [nodes, links] = convertPersonsToGraphData(justPersons);\n      // console.log(nodes, links);\n\n      const lastNode = nodes[nodes.length - 1];\n\n      setGraphData({\n        nodes,\n        links: filterUniqueLinks(links),\n        focusedNodeId: lastNode.id,\n      });\n\n      // const getElem = document.getElementById(\n      //   \"graph-id-graph-container-zoomable\"\n      // );\n      // if (getElem) {\n      //   const graphInst = graphRef.current;\n      //   const hi = 630;\n      //   const wi = 1862;\n      //   const { width, height } = { width: 200, height: 100 }; // TODO doesn't work because the dimensions are not done yet. getElem.getBoundingClientRect();\n      //   const xOffset = Math.round(wi / 2 - width / 2);\n      //   const yOffset = Math.round(hi / 2 - height / 2);\n      //   const transformationConfig = `translate(${xOffset},${yOffset}) scale(1)`;\n      //   (graphInst as any).state.focusTransformation = transformationConfig;\n      // } else {\n      //   console.log(\"no elem\");\n      // }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [searchByBook, dispatch]);\n\n  useEffect(() => {\n    memoizedInitialize();\n  }, [memoizedInitialize]);\n\n  useEffect(() => {\n    // TODO fix rerenderings/choppy slider?\n\n    const [startDate, endDate] = timeRange;\n    const { nodes, links } = graphData;\n\n    const filteredNodes = nodes.filter((node) => {\n      const isBornBeforeEnd = getIsBornBeforeEnd(endDate, node.dateOfBirth);\n      const isAliveAfterStart = getIsAliveAfterStart(\n        startDate,\n        node.dateOfDeath\n      );\n      return isAliveAfterStart && isBornBeforeEnd;\n    });\n\n    const linksToExistingNodes = links.filter(\n      (link) =>\n        filteredNodes.some((n) => n.id === link.source) &&\n        filteredNodes.some((n) => n.id === link.target)\n    );\n\n    setFilteredGraphData({\n      nodes: filteredNodes,\n      links: linksToExistingNodes,\n    });\n  }, [timeRange, graphData]);\n\n  // TODO show wiki\n\n  const onClickNode = (uid: string, originNode: CustomNode) => {\n    // getConnectedToNameDQL(name);\n    // console.log(uid, originNode.x, originNode.y);\n\n    dispatch({\n      type: SET_DETAILS_FOR,\n      payload: [uid, originNode],\n    });\n\n    (async () => {\n      try {\n        const { getPerson } = await getPersonByUid({ uid });\n        const persons = getPerson ? [getPerson].filter(isJustVal) : [];\n        const [nodes, links] = persons\n          ? convertPersonsToGraphData(persons, originNode)\n          : [[], []];\n\n        setGraphData({\n          nodes: graphData?.nodes ? graphData.nodes.concat(nodes) : [],\n          links: filterUniqueLinks(\n            graphData?.links ? graphData.links.concat(links) : []\n          ),\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    })();\n  };\n\n  const dumpData = () => {\n    const getElem = document.getElementById(\n      \"graph-id-graph-container-zoomable\"\n    );\n    if (getElem) {\n      const graphInst = graphRef.current;\n      const nodeCoords = Object.values((graphInst as any).state.nodes).map(\n        ({ id, x, y }: any) => `${id},${x},${y}`\n      );\n      // console.table(nodeCoords);\n      console.log(nodeCoords.join(\"\\n\"));\n    } else {\n      console.log(\"no elem\");\n    }\n  };\n\n  // 48 is height of the topbar (on desktop, 22 mobile)\n  const graphHeight = isSmall\n    ? window.innerHeight - 22\n    : window.innerHeight - 48;\n\n  return (\n    <>\n      <GraphTools />\n      <GraphDetails />\n      {filteredGraphData && filteredGraphData.nodes.length > 0 && (\n        <Graph\n          id=\"graph-id\" // id is mandatory\n          ref={graphRef}\n          data={{ ...filteredGraphData }}\n          config={appGraphConfig(window.innerWidth, graphHeight)}\n          onClickNode={onClickNode as any}\n          onClickGraph={dumpData}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GraphQuery;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(-330 -620)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  xmlnsXlink: \"http://www.w3.org/1999/xlink\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M356.855,633.282c0.058,0.4,0.102,0.806,0.119,1.218h-0.81c-0.2,0.333-0.413,0.666-0.634,1h1.443    c-0.113,2.733-1.134,5.235-2.783,7.201c-0.805-0.464-1.719-0.862-2.709-1.192c0.153-0.456,0.289-0.93,0.409-1.418    c-0.289,0.309-0.578,0.617-0.881,0.92c-0.367,0.367-0.741,0.723-1.117,1.069c0.104,0.025,0.212,0.046,0.313,0.072    c-1.093,2.703-2.781,4.528-4.707,4.801v-1.422c-0.334,0.221-0.667,0.434-1,0.634v0.788c-0.309-0.044-0.608-0.141-0.903-0.262    c-0.61,0.336-1.215,0.625-1.813,0.889c1.03,0.264,2.104,0.42,3.217,0.42c3.699,0,7.028-1.552,9.396-4.031    c0.224-0.234,0.446-0.471,0.652-0.721c1.844-2.244,2.952-5.117,2.952-8.248c0-1.117-0.146-2.2-0.412-3.235    C357.368,632.267,357.127,632.772,356.855,633.282z M348.521,646.471c1.049-0.972,1.947-2.363,2.625-4.043    c0.868,0.282,1.671,0.617,2.379,1.005C352.149,644.824,350.438,645.881,348.521,646.471z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M334.952,643.248c0.206,0.25,0.429,0.486,0.652,0.721c0.633,0.662,1.338,1.253,2.097,1.771    c0.436-0.072,0.892-0.176,1.375-0.327c-0.953-0.545-1.834-1.203-2.602-1.979c0.708-0.388,1.511-0.723,2.379-1.005    c0.387,0.96,0.854,1.812,1.371,2.559c0.297-0.123,0.595-0.25,0.896-0.394c-0.502-0.694-0.952-1.511-1.328-2.44    c1.436-0.376,3.025-0.601,4.707-0.639v1.083c0.334-0.233,0.667-0.478,1-0.731v-0.352c0.141,0.003,0.276,0.016,0.416,0.021    c0.376-0.298,0.749-0.607,1.12-0.929c-0.504-0.046-1.015-0.08-1.536-0.092V635.5h5.986c-0.004,0.174-0.021,0.341-0.029,0.513    c0.4-0.503,0.785-1.007,1.14-1.513h-0.111c-0.048-2.184-0.405-4.229-1.003-6.009c0.99-0.33,1.904-0.729,2.709-1.192    c0.461,0.549,0.866,1.144,1.223,1.77c0.152-0.488,0.257-0.949,0.328-1.386c-0.219-0.32-0.449-0.632-0.694-0.931    c-0.206-0.25-0.429-0.486-0.652-0.721C352.028,623.552,348.699,622,345,622s-7.028,1.552-9.396,4.031    c-0.224,0.234-0.446,0.471-0.652,0.721C333.108,628.996,332,631.869,332,635S333.108,641.004,334.952,643.248z M353.525,626.567    c-0.708,0.388-1.511,0.723-2.379,1.005c-0.678-1.68-1.576-3.071-2.625-4.043C350.438,624.119,352.149,625.176,353.525,626.567z     M345.5,623.047c1.926,0.272,3.614,2.098,4.707,4.801c-1.436,0.376-3.025,0.601-4.707,0.639V623.047z M345.5,629.485    c1.8-0.04,3.504-0.29,5.046-0.712c0.557,1.684,0.894,3.635,0.94,5.727H345.5V629.485z M344.5,640.515    c-1.8,0.04-3.504,0.29-5.046,0.712c-0.557-1.684-0.894-3.635-0.94-5.727h5.986V640.515z M344.5,634.5h-5.986    c0.047-2.092,0.384-4.043,0.94-5.727c1.542,0.422,3.246,0.672,5.046,0.712V634.5z M344.5,623.047v5.439    c-1.682-0.038-3.271-0.263-4.707-0.639C340.886,625.145,342.574,623.319,344.5,623.047z M341.479,623.529    c-1.049,0.972-1.947,2.363-2.625,4.043c-0.868-0.282-1.671-0.617-2.379-1.005C337.851,625.176,339.563,624.119,341.479,623.529z     M335.809,627.299c0.805,0.464,1.719,0.862,2.709,1.192c-0.598,1.78-0.955,3.825-1.003,6.009h-4.489    C333.139,631.767,334.159,629.265,335.809,627.299z M337.515,635.5c0.048,2.184,0.405,4.229,1.003,6.009    c-0.99,0.33-1.904,0.729-2.709,1.192c-1.649-1.966-2.67-4.468-2.783-7.201H337.515z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M340.683,646.966c3.134-1.227,6.551-3.593,9.621-6.662c3.069-3.07,5.436-6.487,6.662-9.621    c1.171-2.992,1.167-5.422,0.031-6.941l1.031-0.273l0.743-0.197l-1.325-0.557l-1.109-0.465l-2.521-1.059l1.059,2.521l0.51,1.214    l0.372,0.886l0.141,0.335l0.433-1.633c0.774,1.25,0.679,3.316-0.296,5.805c-1.177,3.009-3.463,6.305-6.438,9.279    s-6.271,5.261-9.279,6.438c-1.388,0.543-2.642,0.81-3.698,0.809c-1.102-0.001-1.989-0.293-2.579-0.883    c-0.735-0.735-1.01-1.931-0.83-3.431c-0.278-0.435-0.529-0.886-0.759-1.352c-0.584,2.393-0.297,4.312,0.882,5.489    c0.79,0.79,1.907,1.187,3.279,1.187c0.001,0,0.002,0,0.003,0C337.799,647.853,339.17,647.558,340.683,646.966z\"\n})));\n\nfunction SvgArmillarysphere(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: \"300px\",\n    width: \"300px\",\n    fill: \"#000000\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 30 30\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArmillarysphere);\nexport default __webpack_public_path__ + \"static/media/armillarysphere.3317b928.svg\";\nexport { ForwardRef as ReactComponent };","import { FC } from \"react\";\nimport SvgIcon from \"@material-ui/core/SvgIcon\";\nimport { ReactComponent } from \"../../armillarysphere.svg\";\n\ninterface Props {\n  className?: string;\n}\n\nconst ArmillarySphereIcon: FC<Props> = ({ className }) => {\n  return (\n    <SvgIcon\n      className={className}\n      viewBox=\"0 0 30 30\"\n      component={ReactComponent}\n    />\n  );\n};\n\nexport default ArmillarySphereIcon;\n","import Toolbar from \"@material-ui/core/Toolbar/Toolbar\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { Button, makeStyles, Hidden } from \"@material-ui/core\";\nimport ArmillarySphereIcon from \"../ArmillarySphereIcon/ArmillarySphereIcon\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  appIcon: {\n    marginRight: theme.spacing(2),\n    height: \"2.5rem\",\n    width: \"2.5rem\",\n    \"& g\": {\n      fill: \"white\",\n    },\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst AppToolbar = () => {\n  const classes = useStyles();\n  const title = \"Seven Sisters characters\";\n  return (\n    <>\n      <Hidden smUp>\n        <Toolbar style={{ minHeight: 22, fontSize: \"0.8rem\" }}>{title}</Toolbar>\n      </Hidden>\n      <Hidden xsDown>\n        <Toolbar variant=\"dense\">\n          <ArmillarySphereIcon className={classes.appIcon} />\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n            {title}\n          </Typography>\n          <Button color=\"inherit\" component={RouterLink} to=\"/\">\n            Graph\n          </Button>\n          <Button color=\"inherit\" component={RouterLink} to=\"/debugger\">\n            Debugger\n          </Button>\n          <Button color=\"inherit\" href=\"http://localhost:8001/?latest\">\n            Ratel\n          </Button>\n          <Button\n            color=\"inherit\"\n            href=\"https://github.com/mdvanes/7sgraph/issues\"\n          >\n            Github (issues)\n          </Button>\n        </Toolbar>\n      </Hidden>\n    </>\n  );\n};\n\nexport default AppToolbar;\n","import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  DialogContentText,\n  Button,\n  Typography\n} from \"@material-ui/core\";\n\nconst StartDialog = () => {\n  const dialogHasBeenSeen = localStorage.getItem(\"dialogHasBeenSeen\") === \"true\" || false;\n  const [open, setOpen] = useState(!dialogHasBeenSeen);\n  return (\n    <Dialog\n      open={open}\n      disableBackdropClick\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Spoiler Alert & Disclaimer\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n            <Typography color=\"primary\">This app contains spoilers for The Seven Sisters books by Lucinda Riley.</Typography>\n            <Typography>I do not own the rights to any of the characters or books mentioned.</Typography>\n            <Typography>The data may be incomplete or inaccurate, you may file an issue on Github if you want to have this fixed.</Typography>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            localStorage.setItem(\"dialogHasBeenSeen\", \"true\");\n            setOpen(false);\n          }}\n          color=\"primary\"\n          autoFocus\n        >\n          I agree, hide this message in the future.\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default StartDialog;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"graphiql/graphiql.css\";\nimport { AppBar } from \"@material-ui/core\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport GraphDebugger from \"./components/GraphDebugger/GraphDebugger\";\nimport GraphQuery from \"./components/GraphQuery/GraphQuery\";\nimport AppToolbar from \"./components/AppToolbar/AppToolbar\";\nimport StartDialog from \"./components/StartDialog/StartDialog\";\nimport { GraphSettingsProvider } from \"./context/GraphSettingsContext\";\n\nfunction App() {\n  return (\n    <Router>\n      <StartDialog />\n      <div className=\"App\">\n        <AppBar position=\"static\">\n          <AppToolbar />\n        </AppBar>\n        <Switch>\n          <Route path=\"/debugger\">\n            <GraphDebugger />\n          </Route>\n          <Route path=\"/\">\n            <GraphSettingsProvider>\n              <GraphQuery />\n            </GraphSettingsProvider>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}